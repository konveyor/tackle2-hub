// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/addons": {
            "get": {
                "description": "List all addons.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addons"
                ],
                "summary": "List all addons.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Addon"
                            }
                        }
                    }
                }
            }
        },
        "/addons/{name}": {
            "get": {
                "description": "Get an addon by name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addons"
                ],
                "summary": "Get an addon by name.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Addon name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Addon"
                        }
                    }
                }
            }
        },
        "/adoptionplans": {
            "post": {
                "description": "Graph generates an application dependency graph arranged in topological order.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adoptionplans"
                ],
                "summary": "Generate an application dependency graph arranged in topological order.",
                "parameters": [
                    {
                        "description": "List of requested App IDs",
                        "name": "requestedApps",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Vertex"
                            }
                        }
                    }
                }
            }
        },
        "/analyses": {
            "get": {
                "description": "List analyses for an application.\nResources do not include relations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyses"
                ],
                "summary": "List analyses.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Analysis"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/dependencies": {
            "get": {
                "description": "Each report collates dependencies by name and SHA.\nfilters:\n- provider\n- name\n- version\n- sha\n- indirect\n- labels\n- application.id\n- application.name\n- businessService.id\n- businessService.name\n- tag.id\nsort:\n- provider\n- name\n- labels",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dependencies"
                ],
                "summary": "List dependency reports.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TechDependency"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/incidents": {
            "get": {
                "description": "List all incidents.\nfilters:\n- file\n- issue.id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "incidents"
                ],
                "summary": "List all incidents.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Incident"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/incidents/{id}": {
            "get": {
                "description": "Get an incident.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "issue"
                ],
                "summary": "Get an incident.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Incident"
                        }
                    }
                }
            }
        },
        "/analyses/issues": {
            "get": {
                "description": "List all issues.\nfilters:\n- ruleset\n- rule\n- name\n- category\n- effort\n- labels\n- application.id\n- application.name\n- tag.id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "issues"
                ],
                "summary": "List all issues.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Issue"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/issues/{id}": {
            "get": {
                "description": "Get an issue.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "issue"
                ],
                "summary": "Get an issue.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Issue"
                        }
                    }
                }
            }
        },
        "/analyses/issues/{id}/incidents": {
            "get": {
                "description": "List incidents for an issue.\nfilters:\n- file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "incidents"
                ],
                "summary": "List incidents for an issue.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Incident"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/report/applications": {
            "get": {
                "description": "List application reports.\nfilters:\n- id\n- name\n- description\n- businessService\n- provider\n- name\n- version\n- sha\n- indirect\n- dep.provider\n- dep.name\n- dep.version\n- dep.sha\n- dep.indirect\n- dep.labels\n- application.id\n- application.name\n- businessService.id\n- businessService.name\nsort:\n- name\n- description\n- businessService\n- provider\n- name\n- version\n- sha\n- indirect",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depappreports"
                ],
                "summary": "List application reports.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.DepAppReport"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/report/applications/{id}/issues": {
            "get": {
                "description": "Each report collates issues by ruleset/rule.\nfilters:\n- ruleset\n- rule\n- category\n- effort\n- labels\nsort:\n- ruleset\n- rule\n- category\n- effort\n- files",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "issuereport"
                ],
                "summary": "List application issue reports.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.IssueReport"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/report/issues/{id}/files": {
            "get": {
                "description": "Each report collates incidents by file.\nfilters:\n- file\n- effort\n- incidents\nsort:\n- file\n- effort\n- incidents",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filereports"
                ],
                "summary": "List incident file reports.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.FileReport"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/report/rules": {
            "get": {
                "description": "Each report collates issues by ruleset/rule.\nfilters:\n- ruleset\n- rule\n- category\n- effort\n- labels\n- applications\n- application.id\n- application.name\n- businessService.id\n- businessService.name\n- tag.id\nsort:\n- ruleset\n- rule\n- category\n- effort\n- applications",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulereports"
                ],
                "summary": "List rule reports.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RuleReport"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/{id}": {
            "get": {
                "description": "Get an analysis (report) by ID.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "analyses"
                ],
                "summary": "Get an analysis (report) by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Analysis ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Analysis"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an analysis by ID.",
                "tags": [
                    "analyses"
                ],
                "summary": "Delete an analysis by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Analysis ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/analyses/{id}/archive": {
            "post": {
                "description": "Archive an analysis (report) by ID.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "analyses"
                ],
                "summary": "Archive an analysis (report) by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Analysis ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/analyses/{id}/dependencies": {
            "get": {
                "description": "List analysis dependencies.\nfilters:\n- name\n- version\n- sha\n- indirect\n- labels",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dependencies"
                ],
                "summary": "List analysis dependencies.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Analysis ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TechDependency"
                            }
                        }
                    }
                }
            }
        },
        "/analyses/{id}/issues": {
            "get": {
                "description": "List issues for an analysis.\nfilters:\n- ruleset\n- rule\n- name\n- category\n- effort\n- labels",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "issues"
                ],
                "summary": "List issues for an analysis.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Analysis ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Issue"
                            }
                        }
                    }
                }
            }
        },
        "/application/{id}/analyses": {
            "post": {
                "description": "Create an analysis.\nForm fields:\n- file: file that contains the api.Analysis resource.\n- issues: file that multiple api.Issue resources.\n- dependencies: file that multiple api.TechDependency resources.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyses"
                ],
                "summary": "Create an analysis.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Analysis"
                        }
                    }
                }
            }
        },
        "/application/{id}/analysis/dependencies": {
            "get": {
                "description": "List application dependencies.\nfilters:\n- name\n- version\n- sha\n- indirect\n- labels",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dependencies"
                ],
                "summary": "List application dependencies.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TechDependency"
                            }
                        }
                    }
                }
            }
        },
        "/application/{id}/analysis/issues": {
            "get": {
                "description": "List application issues.\nfilters:\n- ruleset\n- rule\n- name\n- category\n- effort\n- labels",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "issues"
                ],
                "summary": "List application issues.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Issue"
                            }
                        }
                    }
                }
            }
        },
        "/applications": {
            "get": {
                "description": "List all applications.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "List all applications.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Application"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an application.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Create an application.",
                "parameters": [
                    {
                        "description": "Application data",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Application"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Application"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete applications.",
                "tags": [
                    "applications"
                ],
                "summary": "Delete a applications.",
                "parameters": [
                    {
                        "description": "List of id",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/applications/{id}": {
            "get": {
                "description": "Get an application by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Get an application by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Application"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an application.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Update an application.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Application data",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Application"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete an application.",
                "tags": [
                    "applications"
                ],
                "summary": "Delete an application.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/applications/{id}/analysis": {
            "get": {
                "description": "Get the latest analysis for an application.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "analyses"
                ],
                "summary": "Get the latest analysis.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Analysis"
                        }
                    }
                }
            }
        },
        "/applications/{id}/analysis/report": {
            "get": {
                "description": "Get the latest analysis (static) report.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "analyses"
                ],
                "summary": "Get the latest analysis (static) report.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/applications/{id}/assessments": {
            "get": {
                "description": "List the assessments of an Application and any it inherits from its archetypes.",
                "tags": [
                    "applications"
                ],
                "summary": "List the assessments of an Application and any it inherits from its archetypes.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Assessment"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an application assessment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Create an application assessment.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Assessment data",
                        "name": "assessment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Assessment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Assessment"
                        }
                    }
                }
            }
        },
        "/applications/{id}/bucket/{wildcard}": {
            "get": {
                "description": "Get bucket content by ID and path.\nReturns index.html for directories when Accept=text/html else a tarball.\n?filter=glob supports directory content filtering.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Get bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Upload bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete bucket content by ID and path.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Delete bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/applications/{id}/facts": {
            "post": {
                "description": "Create a fact.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Create a fact.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fact data",
                        "name": "fact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Fact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/applications/{id}/facts/{key}": {
            "get": {
                "description": "Get fact by name.\nsee api.FactKey for details on key parameter format.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Get fact by name.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fact key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Update (or create) a fact.\nsee api.FactKey for details on key parameter format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Update (or create) a fact.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fact key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fact value",
                        "name": "fact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a fact.\nsee api.FactKey for details on key parameter format.",
                "tags": [
                    "applications"
                ],
                "summary": "Delete a fact.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fact key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/applications/{id}/facts/{source}:": {
            "get": {
                "description": "List facts by source.\nsee api.FactKey for details on key parameter format.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "List facts.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source key",
                        "name": "source",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.FactMap"
                        }
                    }
                }
            },
            "put": {
                "description": "Replace all facts from a source.\nsee api.FactKey for details on key parameter format.",
                "tags": [
                    "applications"
                ],
                "summary": "Replace all facts from a source.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fact key",
                        "name": "source",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fact map",
                        "name": "factmap",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.FactMap"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/applications/{id}/stakeholders": {
            "patch": {
                "description": "Update the owner and contributors of an Application.",
                "tags": [
                    "applications"
                ],
                "summary": "Update the owner and contributors of an Application.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Application stakeholders",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Stakeholders"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/applications/{id}/tags": {
            "get": {
                "description": "List tag references.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "List tag references.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Ref"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Ensure tag is associated with the application.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Add tag association.",
                "parameters": [
                    {
                        "description": "Tag data",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Ref"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Ref"
                        }
                    }
                }
            },
            "patch": {
                "description": "Replace tag associations.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Replace tag associations.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "description": "Tag references",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TagRef"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/applications/{id}/tags/{sid}": {
            "delete": {
                "description": "Ensure tag is not associated with the application.",
                "tags": [
                    "applications"
                ],
                "summary": "Delete tag association.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tag ID",
                        "name": "sid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/archetypes": {
            "get": {
                "description": "List all archetypes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archetypes"
                ],
                "summary": "List all archetypes.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Archetype"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an archetype.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archetypes"
                ],
                "summary": "Create an archetype.",
                "parameters": [
                    {
                        "description": "Archetype data",
                        "name": "archetype",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Archetype"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Archetype"
                        }
                    }
                }
            }
        },
        "/archetypes/{id}": {
            "get": {
                "description": "Get an archetype by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archetypes"
                ],
                "summary": "Get an archetype by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Archetype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Archetype"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an archetype.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "archetypes"
                ],
                "summary": "Update an archetype.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Archetype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Archetype data",
                        "name": "archetype",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Archetype"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete an archetype.",
                "tags": [
                    "archetypes"
                ],
                "summary": "Delete an archetype.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Archetype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/archetypes/{id}/assessments": {
            "get": {
                "description": "List the assessments of an archetype.",
                "tags": [
                    "archetypes"
                ],
                "summary": "List the assessments of an archetype.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Archetype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Assessment"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an archetype assessment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archetypes"
                ],
                "summary": "Create an archetype assessment.",
                "parameters": [
                    {
                        "description": "Assessment data",
                        "name": "assessment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Assessment"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Archetype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Assessment"
                        }
                    }
                }
            }
        },
        "/assessments": {
            "get": {
                "description": "List all assessments.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "assessments"
                ],
                "summary": "List all assessments.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Assessment"
                            }
                        }
                    }
                }
            }
        },
        "/assessments/{id}": {
            "get": {
                "description": "Get an assessment by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questionnaires"
                ],
                "summary": "Get an assessment by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Assessment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Assessment"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an assessment.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "assessments"
                ],
                "summary": "Update an assessment.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Assessment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Assessment data",
                        "name": "assessment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Assessment"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete an assessment.",
                "tags": [
                    "assessments"
                ],
                "summary": "Delete an assessment.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Assessment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login and obtain a bearer token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login and obtain a bearer token.",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Login"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh bearer token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh bearer token.",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Login"
                        }
                    }
                }
            }
        },
        "/batch/tags": {
            "post": {
                "description": "Batch-create Tags.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "batch",
                    "tags"
                ],
                "summary": "Batch-create Tags.",
                "parameters": [
                    {
                        "description": "Tags data",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Tag"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Tag"
                            }
                        }
                    }
                }
            }
        },
        "/batch/tickets": {
            "post": {
                "description": "Batch-create Tickets.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "batch",
                    "tickets"
                ],
                "summary": "Batch-create Tickets.",
                "parameters": [
                    {
                        "description": "Tickets data",
                        "name": "tickets",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Ticket"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Ticket"
                            }
                        }
                    }
                }
            }
        },
        "/buckets": {
            "get": {
                "description": "List all buckets.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "List all buckets.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Bucket"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a bucket.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Create a bucket.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Bucket"
                        }
                    }
                }
            }
        },
        "/buckets/{id}": {
            "get": {
                "description": "Get a bucket by ID.\nReturns api.Bucket when Accept=application/json.\nElse returns index.html when Accept=text/html.\nElse returns tarball.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Get a bucket by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Bucket"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a bucket.",
                "tags": [
                    "buckets"
                ],
                "summary": "Delete a bucket.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/buckets/{id}/{wildcard}": {
            "get": {
                "description": "Get bucket content by ID and path.\nWhen path is FILE, returns file content.\nWhen path is DIRECTORY and Accept=text/html returns index.html.\n?filter=glob supports directory content filtering.\nElse returns a tarball.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Get bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Upload bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete bucket content by ID and path.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Delete bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/businessservices": {
            "get": {
                "description": "List all business services.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businessservices"
                ],
                "summary": "List all business services.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessService"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a business service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businessservices"
                ],
                "summary": "Create a business service.",
                "parameters": [
                    {
                        "description": "Business service data",
                        "name": "business_service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.BusinessService"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessService"
                        }
                    }
                }
            }
        },
        "/businessservices/{id}": {
            "get": {
                "description": "Get a business service by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businessservices"
                ],
                "summary": "Get a business service by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.BusinessService"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a business service.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "businessservices"
                ],
                "summary": "Update a business service.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Business service data",
                        "name": "business_service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.BusinessService"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a business service.",
                "tags": [
                    "businessservices"
                ],
                "summary": "Delete a business service.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/cache": {
            "delete": {
                "description": "Delete a directory within the cache.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cache"
                ],
                "summary": "Delete a directory within the cache.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/caches/{wildcard}": {
            "get": {
                "description": "Get the cache.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cache"
                ],
                "summary": "Get the cache.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cache DIR",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Cache"
                        }
                    }
                }
            }
        },
        "/dependencies": {
            "get": {
                "description": "List all dependencies.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dependencies"
                ],
                "summary": "List all dependencies.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Dependency"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a dependency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dependencies"
                ],
                "summary": "Create a dependency.",
                "parameters": [
                    {
                        "description": "Dependency data",
                        "name": "applications_dependency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Dependency"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Dependency"
                        }
                    }
                }
            }
        },
        "/dependencies/{id}": {
            "get": {
                "description": "Get a dependency by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dependencies"
                ],
                "summary": "Get a dependency by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dependency ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Dependency"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a dependency.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "dependencies"
                ],
                "summary": "Delete a dependency.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dependency id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/files": {
            "get": {
                "description": "List all files.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "List all files.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.File"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Create a file.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.File"
                        }
                    }
                }
            }
        },
        "/files/{id}": {
            "get": {
                "description": "Get a file by ID. Returns api.File when Accept=application/json else the file content.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Get a file by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.File"
                        }
                    }
                }
            },
            "put": {
                "description": "Append a file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Append a file.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a file.",
                "tags": [
                    "file"
                ],
                "summary": "Delete a file.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/identities": {
            "get": {
                "description": "List all identities.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identities"
                ],
                "summary": "List all identities.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Identity"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an identity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identities"
                ],
                "summary": "Create an identity.",
                "parameters": [
                    {
                        "description": "Identity data",
                        "name": "identity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Identity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Identity"
                        }
                    }
                }
            }
        },
        "/identities/{id}": {
            "get": {
                "description": "Get an identity by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identities"
                ],
                "summary": "Get an identity by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Identity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Identity"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an identity.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "identities"
                ],
                "summary": "Update an identity.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Identity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Identity data",
                        "name": "identity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Identity"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete an identity.",
                "tags": [
                    "identities"
                ],
                "summary": "Delete an identity.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Identity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/imports": {
            "get": {
                "description": "List imports.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imports"
                ],
                "summary": "List imports.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Import"
                            }
                        }
                    }
                }
            }
        },
        "/imports/{id}": {
            "get": {
                "description": "Get an import by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imports"
                ],
                "summary": "Get an import by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Import ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Import"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an import. This leaves any created application or dependency.",
                "tags": [
                    "imports"
                ],
                "summary": "Delete an import.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Import ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/importsummaries": {
            "get": {
                "description": "List import summaries.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imports"
                ],
                "summary": "List import summaries.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.ImportSummary"
                            }
                        }
                    }
                }
            }
        },
        "/importsummaries/download": {
            "get": {
                "description": "Export the source CSV for a particular import summary.",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "imports"
                ],
                "summary": "Export the source CSV for a particular import summary.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ImportSummary ID",
                        "name": "importSummary.id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/importsummaries/upload": {
            "post": {
                "description": "Upload a CSV containing applications and dependencies to import.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imports"
                ],
                "summary": "Upload a CSV containing applications and dependencies to import.",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.ImportSummary"
                        }
                    }
                }
            }
        },
        "/importsummaries/{id}": {
            "get": {
                "description": "Get an import by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "imports"
                ],
                "summary": "Get an import summary by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ImportSummary ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ImportSummary"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an import summary and associated import records.",
                "tags": [
                    "imports"
                ],
                "summary": "Delete an import summary and associated import records.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ImportSummary ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/jobfunctions": {
            "get": {
                "description": "List all job functions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobfunctions"
                ],
                "summary": "List all job functions.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.JobFunction"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a job function.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobfunctions"
                ],
                "summary": "Create a job function.",
                "parameters": [
                    {
                        "description": "Job Function data",
                        "name": "job_function",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.JobFunction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.JobFunction"
                        }
                    }
                }
            }
        },
        "/jobfunctions/{id}": {
            "get": {
                "description": "Get a job function by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobfunctions"
                ],
                "summary": "Get a job function by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job Function ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.JobFunction"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a job function.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "jobfunctions"
                ],
                "summary": "Update a job function.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job Function ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Job Function data",
                        "name": "job_function",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.JobFunction"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a job function.",
                "tags": [
                    "jobfunctions"
                ],
                "summary": "Delete a job function.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job Function ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get Prometheus metrics.\nWrapper for Prometheus-supplied handler.\nServed on port defined by METRICS_PORT environment variable.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get Prometheus metrics.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/migrationwaves": {
            "get": {
                "description": "List all migration waves.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "migrationwaves"
                ],
                "summary": "List all migration waves.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.MigrationWave"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a migration wave.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "migrationwaves"
                ],
                "summary": "Create a migration wave.",
                "parameters": [
                    {
                        "description": "Migration Wave data",
                        "name": "migrationwave",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MigrationWave"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.MigrationWave"
                        }
                    }
                }
            }
        },
        "/migrationwaves/{id}": {
            "get": {
                "description": "Get a migration wave by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "migrationwaves"
                ],
                "summary": "Get a migration wave by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Migration Wave ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.MigrationWave"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a migration wave.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "migrationwaves"
                ],
                "summary": "Update a migration wave.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MigrationWave id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MigrationWave data",
                        "name": "migrationWave",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MigrationWave"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a migration wave.",
                "tags": [
                    "migrationwaves"
                ],
                "summary": "Delete a migration wave.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MigrationWave id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/proxies": {
            "get": {
                "description": "List all proxies.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxies"
                ],
                "summary": "List all proxies.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Proxy"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an proxy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxies"
                ],
                "summary": "Create an proxy.",
                "parameters": [
                    {
                        "description": "Proxy data",
                        "name": "proxy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Proxy"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Proxy"
                        }
                    }
                }
            }
        },
        "/proxies/{id}": {
            "get": {
                "description": "Get an proxy by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxies"
                ],
                "summary": "Get an proxy by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Proxy ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Proxy"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an proxy.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "proxies"
                ],
                "summary": "Update an proxy.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Proxy ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Proxy data",
                        "name": "proxy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Proxy"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete an proxy.",
                "tags": [
                    "proxies"
                ],
                "summary": "Delete an proxy.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Proxy ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/questionnaires": {
            "get": {
                "description": "List all questionnaires.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questionnaires"
                ],
                "summary": "List all questionnaires.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Questionnaire"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a questionnaire.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questionnaires"
                ],
                "summary": "Create a questionnaire.",
                "parameters": [
                    {
                        "description": "Questionnaire data",
                        "name": "questionnaire",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Questionnaire"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Questionnaire"
                        }
                    }
                }
            }
        },
        "/questionnaires/{id}": {
            "get": {
                "description": "Get a questionnaire by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questionnaires"
                ],
                "summary": "Get a questionnaire by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Questionnaire ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Questionnaire"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a questionnaire. If the Questionnaire\nis builtin, only its \"required\" field can be changed\nand all other fields will be ignored.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "questionnaires"
                ],
                "summary": "Update a questionnaire.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Questionnaire ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Questionnaire data",
                        "name": "questionnaire",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Questionnaire"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a questionnaire.",
                "tags": [
                    "questionnaires"
                ],
                "summary": "Delete a questionnaire.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Questionnaire ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "description": "List all reviews.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "List all reviews.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Review"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a review.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Create a review.",
                "parameters": [
                    {
                        "description": "Review data",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Review"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Review"
                        }
                    }
                }
            }
        },
        "/reviews/copy": {
            "post": {
                "description": "Copy a review from one application to others.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Copy a review from one application to others.",
                "parameters": [
                    {
                        "description": "Review copy request data",
                        "name": "copy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CopyRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/reviews/{id}": {
            "get": {
                "description": "Get a review by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get a review by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Review"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a review.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Update a review.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review data",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Review"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a review.",
                "tags": [
                    "reviews"
                ],
                "summary": "Delete a review.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/rulesets": {
            "get": {
                "description": "List all bindings.\nfilters:\n- name\n- labels",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesets"
                ],
                "summary": "List all bindings.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RuleSet"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a ruleset.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesets"
                ],
                "summary": "Create a ruleset.",
                "parameters": [
                    {
                        "description": "RuleSet data",
                        "name": "ruleBundle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RuleSet"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.RuleSet"
                        }
                    }
                }
            }
        },
        "/rulesets/{id}": {
            "get": {
                "description": "Get a RuleSet by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesets"
                ],
                "summary": "Get a RuleSet by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "RuleSet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RuleSet"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a ruleset.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "rulesets"
                ],
                "summary": "Update a ruleset.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "RuleSet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "RuleSet data",
                        "name": "ruleBundle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RuleSet"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a ruleset.",
                "tags": [
                    "rulesets"
                ],
                "summary": "Delete a ruleset.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "RuleSet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/schema": {
            "get": {
                "description": "Get the API schema.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schema"
                ],
                "summary": "Get the API schema.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Schema"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "description": "List all settings.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "List all settings.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Setting"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a setting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Create a setting.",
                "parameters": [
                    {
                        "description": "Setting data",
                        "name": "setting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Setting"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Setting"
                        }
                    }
                }
            }
        },
        "/settings/{key}": {
            "get": {
                "description": "Get a setting by its key.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get a setting by its key.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Setting"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a setting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update a setting.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "description": "Create a setting.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Create a setting.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Setting value",
                        "name": "setting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Setting"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            },
            "delete": {
                "description": "Delete a setting.",
                "tags": [
                    "settings"
                ],
                "summary": "Delete a setting.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/stakeholdergroups": {
            "get": {
                "description": "List all stakeholder groups.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stakeholdergroups"
                ],
                "summary": "List all stakeholder groups.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.StakeholderGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a stakeholder group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stakeholdergroups"
                ],
                "summary": "Create a stakeholder group.",
                "parameters": [
                    {
                        "description": "Stakeholder Group data",
                        "name": "stakeholder_group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.StakeholderGroup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.StakeholderGroup"
                        }
                    }
                }
            }
        },
        "/stakeholdergroups/{id}": {
            "get": {
                "description": "Get a stakeholder group by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stakeholdergroups"
                ],
                "summary": "Get a stakeholder group by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stakeholder Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StakeholderGroup"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a stakeholder group.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "stakeholdergroups"
                ],
                "summary": "Update a stakeholder group.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stakeholder Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Stakeholder Group data",
                        "name": "stakeholder_group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.StakeholderGroup"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a stakeholder group.",
                "tags": [
                    "stakeholdergroups"
                ],
                "summary": "Delete a stakeholder group.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stakeholder Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/stakeholders": {
            "get": {
                "description": "List all stakeholders.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stakeholders"
                ],
                "summary": "List all stakeholders.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Stakeholder"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a stakeholder.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stakeholders"
                ],
                "summary": "Create a stakeholder.",
                "parameters": [
                    {
                        "description": "Stakeholder data",
                        "name": "stakeholder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Stakeholder"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Stakeholder"
                        }
                    }
                }
            }
        },
        "/stakeholders/{id}": {
            "get": {
                "description": "Get a stakeholder by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stakeholders"
                ],
                "summary": "Get a stakeholder by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stakeholder ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Stakeholder"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a stakeholder.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "stakeholders"
                ],
                "summary": "Update a stakeholder.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stakeholder ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Stakeholder data",
                        "name": "stakeholder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Stakeholder"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a stakeholder.",
                "tags": [
                    "stakeholders"
                ],
                "summary": "Delete a stakeholder.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stakeholder ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tagcategories": {
            "get": {
                "description": "List all tag categories.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tagcategories"
                ],
                "summary": "List all tag categories.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Optional category name filter",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TagCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a tag category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tagcategories"
                ],
                "summary": "Create a tag category.",
                "parameters": [
                    {
                        "description": "Tag Category data",
                        "name": "tag_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TagCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.TagCategory"
                        }
                    }
                }
            }
        },
        "/tagcategories/{id}": {
            "get": {
                "description": "Get a tag category by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tagcategories"
                ],
                "summary": "Get a tag category by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TagCategory"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a tag category.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "tagcategories"
                ],
                "summary": "Update a tag category.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag Category data",
                        "name": "tag_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TagCategory"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a tag category.",
                "tags": [
                    "tagcategories"
                ],
                "summary": "Delete a tag category.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tagcategories/{id}/tags": {
            "get": {
                "description": "List the tags in the tag category.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tagcategories"
                ],
                "summary": "List the tags in the tag category.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional tag name filter",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Tag"
                            }
                        }
                    }
                }
            }
        },
        "/tags": {
            "get": {
                "description": "List all tags.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "List all tags.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Tag"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a tag.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Create a tag.",
                "parameters": [
                    {
                        "description": "Tag data",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Tag"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Tag"
                        }
                    }
                }
            }
        },
        "/tags/{id}": {
            "get": {
                "description": "Get a tag by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Get a tag by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Tag"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a tag.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Update a tag.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag data",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Tag"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a tag.",
                "tags": [
                    "tags"
                ],
                "summary": "Delete a tag.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/targets": {
            "get": {
                "description": "List all targets.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "List all targets.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Target"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a target.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "Create a target.",
                "parameters": [
                    {
                        "description": "Target data",
                        "name": "target",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Target"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Target"
                        }
                    }
                }
            }
        },
        "/targets/{id}": {
            "get": {
                "description": "Get a Target by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "Get a Target by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Target"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a target.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "Update a target.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Target data",
                        "name": "target",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Target"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a target.",
                "tags": [
                    "targets"
                ],
                "summary": "Delete a target.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/taskgroups": {
            "get": {
                "description": "List all task groups.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "List all task groups.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TaskGroup"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a task group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "Create a task group.",
                "parameters": [
                    {
                        "description": "TaskGroup data",
                        "name": "taskgroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TaskGroup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.TaskGroup"
                        }
                    }
                }
            }
        },
        "/taskgroups/{id}": {
            "get": {
                "description": "Get a task group by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "Get a task group by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TaskGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TaskGroup"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a task group.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "Update a task group.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task data",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TaskGroup"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a task group.",
                "tags": [
                    "taskgroups"
                ],
                "summary": "Delete a task group.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TaskGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/taskgroups/{id}/bucket/{wildcard}": {
            "get": {
                "description": "Get bucket content by ID and path.\nReturns index.html for directories when Accept=text/html else a tarball.\n?filter=glob supports directory content filtering.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "Get bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TaskGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "Upload bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TaskGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete bucket content by ID and path.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "Delete bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/taskgroups/{id}/submit": {
            "put": {
                "description": "Patch and submit a task group.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "taskgroups"
                ],
                "summary": "Submit a task group.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "TaskGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TaskGroup data (optional)",
                        "name": "taskgroup",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.TaskGroup"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "Queued queued task report.\nFilters:\n- addon",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Queued queued task report.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TaskQueue"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a task.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a task.",
                "parameters": [
                    {
                        "description": "Task data",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Task"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Task"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "description": "Get a task by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get a task by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Task"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a task.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update a task.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task data",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "description": "Delete a task.",
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tasks/{id}/attached": {
            "get": {
                "description": "Get attached files.\nReturns a tarball with attached files.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get attached files.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/tasks/{id}/bucket/{wildcard}": {
            "get": {
                "description": "Get bucket content by ID and path.\nReturns index.html for directories when Accept=text/html else a tarball.\n?filter=glob supports directory content filtering.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Upload bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete bucket content by ID and path.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete bucket content by ID and path.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content path",
                        "name": "wildcard",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tasks/{id}/cancel": {
            "put": {
                "description": "Cancel a task.",
                "tags": [
                    "tasks"
                ],
                "summary": "Cancel a task.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        },
        "/tasks/{id}/report": {
            "put": {
                "description": "Update a task report.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update a task report.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TaskReport data",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TaskReport"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "description": "Update a task report.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a task report.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TaskReport data",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TaskReport"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.TaskReport"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a task report.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task report.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/tasks/{id}/submit": {
            "put": {
                "description": "Patch and submit a task.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Submit a task.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task data (optional)",
                        "name": "task",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/tickets": {
            "get": {
                "description": "List all tickets.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "List all tickets.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Ticket"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a ticket.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Create a ticket.",
                "parameters": [
                    {
                        "description": "Ticket data",
                        "name": "ticket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Ticket"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Ticket"
                        }
                    }
                }
            }
        },
        "/tickets/{id}": {
            "get": {
                "description": "Get a ticket by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Get a ticket by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Ticket"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a ticket.",
                "tags": [
                    "tickets"
                ],
                "summary": "Delete a ticket.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/trackers": {
            "get": {
                "description": "List all trackers.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackers"
                ],
                "summary": "List all trackers.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Tracker"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a tracker.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackers"
                ],
                "summary": "Create a tracker.",
                "parameters": [
                    {
                        "description": "Tracker data",
                        "name": "tracker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Tracker"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.Tracker"
                        }
                    }
                }
            }
        },
        "/trackers/{id}": {
            "get": {
                "description": "Get a tracker by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackers"
                ],
                "summary": "Get a tracker by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tracker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Tracker"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a tracker.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "trackers"
                ],
                "summary": "Update a tracker.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tracker id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tracker data",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Tracker"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a tracker.",
                "tags": [
                    "trackers"
                ],
                "summary": "Delete a tracker.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tracker id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/trackers/{id}/projects": {
            "get": {
                "description": "List a tracker's projects.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackers"
                ],
                "summary": "List a tracker's projects.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tracker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Project"
                            }
                        }
                    }
                }
            }
        },
        "/trackers/{id}/projects/{id2}": {
            "get": {
                "description": "Get a tracker project by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackers"
                ],
                "summary": "Get a tracker project by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tracker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id2",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Project"
                        }
                    }
                }
            }
        },
        "/trackers/{id}/projects/{id2}/issuetypes": {
            "get": {
                "description": "List a tracker project's issue types.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackers"
                ],
                "summary": "List a tracker project's issue types.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tracker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id2",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.IssueType"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Addon": {
            "type": "object",
            "properties": {
                "container": {
                    "$ref": "#/definitions/v1.Container"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Extension"
                    }
                },
                "metadata": {},
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Analysis": {
            "type": "object",
            "properties": {
                "application": {
                    "$ref": "#/definitions/api.Ref"
                },
                "archived": {
                    "type": "boolean"
                },
                "commit": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TechDependency"
                    }
                },
                "effort": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "issues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Issue"
                    }
                },
                "summary": {
                    "type": "object"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Application": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "archetypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "assessed": {
                    "type": "boolean"
                },
                "assessments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "binary": {
                    "type": "string"
                },
                "bucket": {
                    "$ref": "#/definitions/api.Ref"
                },
                "businessService": {
                    "$ref": "#/definitions/api.Ref"
                },
                "comments": {
                    "type": "string"
                },
                "confidence": {
                    "type": "integer"
                },
                "contributors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "effort": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "identities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "migrationWave": {
                    "$ref": "#/definitions/api.Ref"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/api.Ref"
                },
                "repository": {
                    "$ref": "#/definitions/api.Repository"
                },
                "review": {
                    "$ref": "#/definitions/api.Ref"
                },
                "risk": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TagRef"
                    }
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Archetype": {
            "type": "object",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "assessed": {
                    "type": "boolean"
                },
                "assessments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "comments": {
                    "type": "string"
                },
                "confidence": {
                    "type": "integer"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "criteria": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TagRef"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "review": {
                    "$ref": "#/definitions/api.Ref"
                },
                "risk": {
                    "type": "string"
                },
                "stakeholderGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "stakeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TagRef"
                    }
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Assessment": {
            "type": "object",
            "required": [
                "questionnaire"
            ],
            "properties": {
                "application": {
                    "$ref": "#/definitions/api.Ref"
                },
                "archetype": {
                    "$ref": "#/definitions/api.Ref"
                },
                "confidence": {
                    "type": "integer"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "questionnaire": {
                    "$ref": "#/definitions/api.Ref"
                },
                "required": {
                    "type": "boolean"
                },
                "risk": {
                    "description": "read only",
                    "type": "string"
                },
                "riskMessages": {
                    "$ref": "#/definitions/assessment.RiskMessages"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assessment.Section"
                    }
                },
                "stakeholderGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "stakeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "status": {
                    "type": "string"
                },
                "thresholds": {
                    "$ref": "#/definitions/assessment.Thresholds"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Attachment": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "activity": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Bucket": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "expiration": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.BusinessService": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/api.Ref"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Cache": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "string"
                },
                "exists": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "used": {
                    "type": "string"
                }
            }
        },
        "api.CopyRequest": {
            "type": "object",
            "required": [
                "sourceReview",
                "targetApplications"
            ],
            "properties": {
                "sourceReview": {
                    "type": "integer"
                },
                "targetApplications": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "api.DepAppReport": {
            "type": "object",
            "properties": {
                "businessService": {
                    "type": "string"
                },
                "dependency": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "indirect": {
                            "type": "boolean"
                        },
                        "labels": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": {
                            "type": "string"
                        },
                        "provider": {
                            "type": "string"
                        },
                        "sha": {
                            "type": "string"
                        },
                        "version": {
                            "type": "string"
                        }
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Dependency": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "from": {
                    "$ref": "#/definitions/api.Ref"
                },
                "id": {
                    "type": "integer"
                },
                "to": {
                    "$ref": "#/definitions/api.Ref"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Extension": {
            "type": "object",
            "properties": {
                "addon": {
                    "type": "string"
                },
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "container": {
                    "$ref": "#/definitions/v1.Container"
                },
                "metadata": {},
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Fact": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "api.FactMap": {
            "type": "object",
            "additionalProperties": {}
        },
        "api.Fields": {
            "type": "object",
            "additionalProperties": {}
        },
        "api.File": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "expiration": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.FileReport": {
            "type": "object",
            "properties": {
                "effort": {
                    "type": "integer"
                },
                "file": {
                    "type": "string"
                },
                "incidents": {
                    "type": "integer"
                },
                "issueId": {
                    "type": "integer"
                }
            }
        },
        "api.Identity": {
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "settings": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "api.Import": {
            "type": "object",
            "additionalProperties": {}
        },
        "api.ImportSummary": {
            "type": "object",
            "properties": {
                "createEntities": {
                    "type": "boolean"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "importStatus": {
                    "type": "string"
                },
                "importTime": {
                    "type": "string"
                },
                "invalidCount": {
                    "type": "integer"
                },
                "updateUser": {
                    "type": "string"
                },
                "validCount": {
                    "type": "integer"
                }
            }
        },
        "api.Incident": {
            "type": "object",
            "properties": {
                "codeSnip": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "facts": {
                    "$ref": "#/definitions/api.FactMap"
                },
                "file": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "issue": {
                    "type": "integer"
                },
                "line": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Issue": {
            "type": "object",
            "required": [
                "category",
                "name",
                "rule",
                "ruleset"
            ],
            "properties": {
                "analysis": {
                    "type": "integer"
                },
                "category": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "effort": {
                    "type": "integer"
                },
                "facts": {
                    "$ref": "#/definitions/api.FactMap"
                },
                "id": {
                    "type": "integer"
                },
                "incidents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Incident"
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Link"
                    }
                },
                "name": {
                    "type": "string"
                },
                "rule": {
                    "type": "string"
                },
                "ruleset": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.IssueAppReport": {
            "type": "object",
            "properties": {
                "businessService": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "effort": {
                    "type": "integer"
                },
                "files": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "incidents": {
                    "type": "integer"
                },
                "issue": {
                    "type": "object",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer"
                        },
                        "name": {
                            "type": "string"
                        },
                        "rule": {
                            "type": "string"
                        },
                        "ruleset": {
                            "type": "string"
                        }
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.IssueReport": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "effort": {
                    "type": "integer"
                },
                "files": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Link"
                    }
                },
                "name": {
                    "type": "string"
                },
                "rule": {
                    "type": "string"
                },
                "ruleset": {
                    "type": "string"
                }
            }
        },
        "api.IssueType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.JobFunction": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "stakeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Label": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Link": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "api.Login": {
            "type": "object",
            "properties": {
                "expiry": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "api.MigrationWave": {
            "type": "object",
            "required": [
                "endDate",
                "startDate"
            ],
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "stakeholderGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "stakeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "startDate": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Project": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Proxy": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "excluded": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identity": {
                    "$ref": "#/definitions/api.Ref"
                },
                "kind": {
                    "type": "string",
                    "enum": [
                        "http",
                        "https"
                    ]
                },
                "port": {
                    "type": "integer"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Questionnaire": {
            "type": "object",
            "required": [
                "name",
                "riskMessages",
                "sections",
                "thresholds"
            ],
            "properties": {
                "builtin": {
                    "type": "boolean"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "riskMessages": {
                    "$ref": "#/definitions/assessment.RiskMessages"
                },
                "sections": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/assessment.Section"
                    }
                },
                "thresholds": {
                    "$ref": "#/definitions/assessment.Thresholds"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Ref": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Repository": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "api.Review": {
            "type": "object",
            "properties": {
                "application": {
                    "$ref": "#/definitions/api.Ref"
                },
                "archetype": {
                    "$ref": "#/definitions/api.Ref"
                },
                "businessCriticality": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "effortEstimate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "proposedAction": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                },
                "workPriority": {
                    "type": "integer"
                }
            }
        },
        "api.Rule": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "file": {
                    "$ref": "#/definitions/api.Ref"
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.RuleReport": {
            "type": "object",
            "properties": {
                "applications": {
                    "type": "integer"
                },
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "effort": {
                    "type": "integer"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Link"
                    }
                },
                "name": {
                    "type": "string"
                },
                "rule": {
                    "type": "string"
                },
                "ruleset": {
                    "type": "string"
                }
            }
        },
        "api.RuleSet": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "dependsOn": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identity": {
                    "$ref": "#/definitions/api.Ref"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "repository": {
                    "$ref": "#/definitions/api.Repository"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Rule"
                    }
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Schema": {
            "type": "object",
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "api.Setting": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "api.Stakeholder": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "businessServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "contributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "jobFunction": {
                    "$ref": "#/definitions/api.Ref"
                },
                "migrationWaves": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "stakeholderGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.StakeholderGroup": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "migrationWaves": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "name": {
                    "type": "string"
                },
                "stakeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Stakeholders": {
            "type": "object",
            "properties": {
                "contributors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "owner": {
                    "$ref": "#/definitions/api.Ref"
                }
            }
        },
        "api.TTL": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "integer"
                },
                "failed": {
                    "type": "integer"
                },
                "pending": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                },
                "succeeded": {
                    "type": "integer"
                }
            }
        },
        "api.Tag": {
            "type": "object",
            "required": [
                "category",
                "name"
            ],
            "properties": {
                "category": {
                    "$ref": "#/definitions/api.Ref"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.TagCategory": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "colour": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ref"
                    }
                },
                "updateUser": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.TagRef": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "virtual": {
                    "type": "boolean"
                }
            }
        },
        "api.Target": {
            "type": "object",
            "properties": {
                "choice": {
                    "type": "boolean"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "custom": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "$ref": "#/definitions/api.Ref"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Label"
                    }
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "ruleset": {
                    "$ref": "#/definitions/api.RuleSet"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Task": {
            "type": "object",
            "properties": {
                "activity": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "addon": {
                    "type": "string"
                },
                "application": {
                    "$ref": "#/definitions/api.Ref"
                },
                "attached": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Attachment"
                    }
                },
                "bucket": {
                    "$ref": "#/definitions/api.Ref"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "data": {},
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TaskError"
                    }
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TaskEvent"
                    }
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "locator": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pod": {
                    "type": "string"
                },
                "policy": {
                    "$ref": "#/definitions/api.TaskPolicy"
                },
                "priority": {
                    "type": "integer"
                },
                "retries": {
                    "type": "integer"
                },
                "started": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "terminated": {
                    "type": "string"
                },
                "ttl": {
                    "$ref": "#/definitions/api.TTL"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.TaskError": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "api.TaskEvent": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "api.TaskGroup": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "addon": {
                    "type": "string"
                },
                "bucket": {
                    "$ref": "#/definitions/api.Ref"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "data": {
                    "type": "object"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policy": {
                    "$ref": "#/definitions/api.TaskPolicy"
                },
                "priority": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Task"
                    }
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.TaskPolicy": {
            "type": "object",
            "properties": {
                "isolated": {
                    "type": "boolean"
                },
                "preemptEnabled": {
                    "type": "boolean"
                },
                "preemptExempt": {
                    "type": "boolean"
                }
            }
        },
        "api.TaskQueue": {
            "type": "object",
            "properties": {
                "pending": {
                    "type": "integer"
                },
                "postponed": {
                    "type": "integer"
                },
                "ready": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.TaskReport": {
            "type": "object",
            "properties": {
                "activity": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "attached": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Attachment"
                    }
                },
                "completed": {
                    "type": "integer"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TaskError"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "result": {},
                "status": {
                    "type": "string"
                },
                "task": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.TechDependency": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "analysis": {
                    "type": "integer"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "indirect": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "sha": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "api.Ticket": {
            "type": "object",
            "required": [
                "application",
                "kind",
                "parent",
                "tracker"
            ],
            "properties": {
                "application": {
                    "$ref": "#/definitions/api.Ref"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "error": {
                    "type": "boolean"
                },
                "fields": {
                    "$ref": "#/definitions/api.Fields"
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "parent": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tracker": {
                    "$ref": "#/definitions/api.Ref"
                },
                "updateUser": {
                    "type": "string"
                }
            }
        },
        "api.Tracker": {
            "type": "object",
            "required": [
                "identity",
                "kind",
                "name",
                "url"
            ],
            "properties": {
                "connected": {
                    "type": "boolean"
                },
                "createTime": {
                    "type": "string"
                },
                "createUser": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identity": {
                    "$ref": "#/definitions/api.Ref"
                },
                "insecure": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "enum": [
                        "jira-cloud",
                        "jira-onprem"
                    ]
                },
                "lastUpdated": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updateUser": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "api.Vertex": {
            "type": "object",
            "properties": {
                "applicationId": {
                    "type": "integer"
                },
                "applicationName": {
                    "type": "string"
                },
                "decision": {
                    "type": "string"
                },
                "effort": {
                    "type": "integer"
                },
                "effortEstimate": {
                    "type": "string"
                },
                "positionX": {
                    "type": "integer"
                },
                "positionY": {
                    "type": "integer"
                }
            }
        },
        "assessment.Answer": {
            "type": "object",
            "required": [
                "order"
            ],
            "properties": {
                "applyTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assessment.CategorizedTag"
                    }
                },
                "autoAnswerFor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assessment.CategorizedTag"
                    }
                },
                "autoAnswered": {
                    "type": "boolean"
                },
                "mitigation": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "rationale": {
                    "type": "string"
                },
                "risk": {
                    "type": "string",
                    "enum": [
                        "red",
                        "yellow",
                        "green",
                        "unknown"
                    ]
                },
                "selected": {
                    "type": "boolean"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "assessment.CategorizedTag": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "assessment.Question": {
            "type": "object",
            "required": [
                "order"
            ],
            "properties": {
                "answers": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/assessment.Answer"
                    }
                },
                "excludeFor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assessment.CategorizedTag"
                    }
                },
                "explanation": {
                    "type": "string"
                },
                "includeFor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assessment.CategorizedTag"
                    }
                },
                "order": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "assessment.RiskMessages": {
            "type": "object",
            "properties": {
                "green": {
                    "type": "string"
                },
                "red": {
                    "type": "string"
                },
                "unknown": {
                    "type": "string"
                },
                "yellow": {
                    "type": "string"
                }
            }
        },
        "assessment.Section": {
            "type": "object",
            "required": [
                "order"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "questions": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/assessment.Question"
                    }
                }
            }
        },
        "assessment.Thresholds": {
            "type": "object",
            "properties": {
                "red": {
                    "type": "integer"
                },
                "unknown": {
                    "type": "integer"
                },
                "yellow": {
                    "type": "integer"
                }
            }
        },
        "intstr.IntOrString": {
            "type": "object",
            "properties": {
                "intVal": {
                    "type": "integer"
                },
                "strVal": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/intstr.Type"
                }
            }
        },
        "intstr.Type": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-comments": {
                "Int": "The IntOrString holds an int.",
                "String": "The IntOrString holds a string."
            },
            "x-enum-varnames": [
                "Int",
                "String"
            ]
        },
        "resource.Quantity": {
            "type": "object",
            "properties": {
                "Format": {
                    "type": "string",
                    "enum": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ],
                    "x-enum-comments": {
                        "BinarySI": "e.g., 12Mi (12 * 2^20)",
                        "DecimalExponent": "e.g., 12e6",
                        "DecimalSI": "e.g., 12M  (12 * 10^6)"
                    },
                    "x-enum-varnames": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ]
                }
            }
        },
        "v1.Capabilities": {
            "type": "object",
            "properties": {
                "add": {
                    "description": "Added capabilities\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "drop": {
                    "description": "Removed capabilities\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.ConfigMapEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.Container": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Lifecycle"
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerPort"
                    }
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "resources": {
                    "description": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TerminationMessagePolicy"
                        }
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerPort": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                    "type": "integer"
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.\n+optional",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
                    "type": "integer"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.EnvFromSource": {
            "type": "object",
            "properties": {
                "configMapRef": {
                    "description": "The ConfigMap to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapEnvSource"
                        }
                    ]
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "The Secret to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretEnvSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EnvVarSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVarSource": {
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapKeySelector"
                        }
                    ]
                },
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, ` + "`" + `metadata.labels['\u003cKEY\u003e']` + "`" + `, ` + "`" + `metadata.annotations['\u003cKEY\u003e']` + "`" + `,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                },
                "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretKeySelector"
                        }
                    ]
                }
            }
        },
        "v1.ExecAction": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.GRPCAction": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                    "type": "integer"
                },
                "service": {
                    "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\"",
                    "type": "string"
                }
            }
        },
        "v1.HTTPGetAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional",
                    "type": "string"
                },
                "httpHeaders": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HTTPHeader"
                    }
                },
                "path": {
                    "description": "Path to access on the HTTP server.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "scheme": {
                    "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.URIScheme"
                        }
                    ]
                }
            }
        },
        "v1.HTTPHeader": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The header field name",
                    "type": "string"
                },
                "value": {
                    "description": "The header field value",
                    "type": "string"
                }
            }
        },
        "v1.Lifecycle": {
            "type": "object",
            "properties": {
                "postStart": {
                    "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                },
                "preStop": {
                    "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                }
            }
        },
        "v1.LifecycleHandler": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "tcpSocket": {
                    "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                }
            }
        },
        "v1.MountPropagationMode": {
            "type": "string",
            "enum": [
                "None",
                "HostToContainer",
                "Bidirectional"
            ],
            "x-enum-varnames": [
                "MountPropagationNone",
                "MountPropagationHostToContainer",
                "MountPropagationBidirectional"
            ]
        },
        "v1.ObjectFieldSelector": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            }
        },
        "v1.Probe": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.\nThis is a beta field and requires enabling GRPCContainerProbe feature gate.\n+featureGate=GRPCContainerProbe\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GRPCAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ProcMountType": {
            "type": "string",
            "enum": [
                "Default",
                "Unmasked"
            ],
            "x-enum-varnames": [
                "DefaultProcMount",
                "UnmaskedProcMount"
            ]
        },
        "v1.Protocol": {
            "type": "string",
            "enum": [
                "TCP",
                "UDP",
                "SCTP"
            ],
            "x-enum-varnames": [
                "ProtocolTCP",
                "ProtocolUDP",
                "ProtocolSCTP"
            ]
        },
        "v1.PullPolicy": {
            "type": "string",
            "enum": [
                "Always",
                "Never",
                "IfNotPresent"
            ],
            "x-enum-varnames": [
                "PullAlways",
                "PullNever",
                "PullIfNotPresent"
            ]
        },
        "v1.ResourceFieldSelector": {
            "type": "object",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars\n+optional",
                    "type": "string"
                },
                "divisor": {
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            }
        },
        "v1.ResourceList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/resource.Quantity"
            }
        },
        "v1.ResourceRequirements": {
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.SELinuxOptions": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "Level is SELinux level label that applies to the container.\n+optional",
                    "type": "string"
                },
                "role": {
                    "description": "Role is a SELinux role label that applies to the container.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a SELinux type label that applies to the container.\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "User is a SELinux user label that applies to the container.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.SeccompProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust only be set if type is \"Localhost\".\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfileType"
                        }
                    ]
                }
            }
        },
        "v1.SeccompProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "SeccompProfileTypeUnconfined",
                "SeccompProfileTypeRuntimeDefault",
                "SeccompProfileTypeLocalhost"
            ]
        },
        "v1.SecretEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecurityContext": {
            "type": "object",
            "properties": {
                "allowPrivilegeEscalation": {
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "capabilities": {
                    "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Capabilities"
                        }
                    ]
                },
                "privileged": {
                    "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "procMount": {
                    "description": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProcMountType"
                        }
                    ]
                },
                "readOnlyRootFilesystem": {
                    "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod \u0026 container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.TCPSocketAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.TerminationMessagePolicy": {
            "type": "string",
            "enum": [
                "File",
                "FallbackToLogsOnError"
            ],
            "x-enum-varnames": [
                "TerminationMessageReadFile",
                "TerminationMessageFallbackToLogsOnError"
            ]
        },
        "v1.URIScheme": {
            "type": "string",
            "enum": [
                "HTTP",
                "HTTPS"
            ],
            "x-enum-varnames": [
                "URISchemeHTTP",
                "URISchemeHTTPS"
            ]
        },
        "v1.VolumeDevice": {
            "type": "object",
            "properties": {
                "devicePath": {
                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                    "type": "string"
                },
                "name": {
                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                    "type": "string"
                }
            }
        },
        "v1.VolumeMount": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                    "type": "string"
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.MountPropagationMode"
                        }
                    ]
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.WindowsSecurityContextOptions": {
            "type": "object",
            "properties": {
                "gmsaCredentialSpec": {
                    "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional",
                    "type": "string"
                },
                "gmsaCredentialSpecName": {
                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional",
                    "type": "string"
                },
                "hostProcess": {
                    "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nThis field is alpha-level and will only be honored by components that enable the\nWindowsHostProcessContainers feature flag. Setting this field without the feature\nflag will result in errors when validating the Pod. All of a Pod's containers must\nhave the same effective HostProcess value (it is not allowed to have a mix of HostProcess\ncontainers and non-HostProcess containers).  In addition, if HostProcess is true\nthen HostNetwork must also be set to true.\n+optional",
                    "type": "boolean"
                },
                "runAsUserName": {
                    "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.3.z",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Konveyor Hub API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
