{
  "openapi": "3.0.1",
  "info": {
    "title": "Konveyor Hub API",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.3.z"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/addons": {
      "get": {
        "tags": [
          "addons"
        ],
        "summary": "List all addons.",
        "description": "List all addons.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Addon"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addons/{name}": {
      "get": {
        "tags": [
          "addons"
        ],
        "summary": "Get an addon by name.",
        "description": "Get an addon by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Addon name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Addon"
                }
              }
            }
          }
        }
      }
    },
    "/adoptionplans": {
      "post": {
        "tags": [
          "adoptionplans"
        ],
        "summary": "Generate an application dependency graph arranged in topological order.",
        "description": "Graph generates an application dependency graph arranged in topological order.",
        "requestBody": {
          "description": "List of requested App IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Vertex"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "requestedApps"
      }
    },
    "/analyses": {
      "get": {
        "tags": [
          "analyses"
        ],
        "summary": "List analyses.",
        "description": "List analyses for an application.\nResources do not include relations.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Analysis"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/dependencies": {
      "get": {
        "tags": [
          "dependencies"
        ],
        "summary": "List dependency reports.",
        "description": "Each report collates dependencies by name and SHA.\nfilters:\n- provider\n- name\n- version\n- sha\n- indirect\n- labels\n- application.id\n- application.name\n- businessService.id\n- businessService.name\n- tag.id\nsort:\n- provider\n- name\n- labels",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.TechDependency"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/incidents": {
      "get": {
        "tags": [
          "incidents"
        ],
        "summary": "List all incidents.",
        "description": "List all incidents.\nfilters:\n- file\n- issue.id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Incident"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/incidents/{id}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get an incident.",
        "description": "Get an incident.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Incident"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/issues": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "List all issues.",
        "description": "List all issues.\nfilters:\n- ruleset\n- rule\n- name\n- category\n- effort\n- labels\n- application.id\n- application.name\n- tag.id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/issues/{id}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get an issue.",
        "description": "Get an issue.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Issue"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/issues/{id}/incidents": {
      "get": {
        "tags": [
          "incidents"
        ],
        "summary": "List incidents for an issue.",
        "description": "List incidents for an issue.\nfilters:\n- file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Incident"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/report/applications": {
      "get": {
        "tags": [
          "depappreports"
        ],
        "summary": "List application reports.",
        "description": "List application reports.\nfilters:\n- id\n- name\n- description\n- businessService\n- provider\n- name\n- version\n- sha\n- indirect\n- dep.provider\n- dep.name\n- dep.version\n- dep.sha\n- dep.indirect\n- dep.labels\n- application.id\n- application.name\n- businessService.id\n- businessService.name\nsort:\n- name\n- description\n- businessService\n- provider\n- name\n- version\n- sha\n- indirect",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.DepAppReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/report/applications/{id}/issues": {
      "get": {
        "tags": [
          "issuereport"
        ],
        "summary": "List application issue reports.",
        "description": "Each report collates issues by ruleset/rule.\nfilters:\n- ruleset\n- rule\n- category\n- effort\n- labels\nsort:\n- ruleset\n- rule\n- category\n- effort\n- files",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.IssueReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/report/issues/{id}/files": {
      "get": {
        "tags": [
          "filereports"
        ],
        "summary": "List incident file reports.",
        "description": "Each report collates incidents by file.\nfilters:\n- file\n- effort\n- incidents\nsort:\n- file\n- effort\n- incidents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.FileReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/report/rules": {
      "get": {
        "tags": [
          "rulereports"
        ],
        "summary": "List rule reports.",
        "description": "Each report collates issues by ruleset/rule.\nfilters:\n- ruleset\n- rule\n- category\n- effort\n- labels\n- applications\n- application.id\n- application.name\n- businessService.id\n- businessService.name\n- tag.id\nsort:\n- ruleset\n- rule\n- category\n- effort\n- applications",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.RuleReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{id}": {
      "get": {
        "tags": [
          "analyses"
        ],
        "summary": "Get an analysis (report) by ID.",
        "description": "Get an analysis (report) by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Analysis ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/api.Analysis"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "analyses"
        ],
        "summary": "Delete an analysis by ID.",
        "description": "Delete an analysis by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Analysis ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/analyses/{id}/archive": {
      "post": {
        "tags": [
          "analyses"
        ],
        "summary": "Archive an analysis (report) by ID.",
        "description": "Archive an analysis (report) by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Analysis ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/analyses/{id}/dependencies": {
      "get": {
        "tags": [
          "dependencies"
        ],
        "summary": "List analysis dependencies.",
        "description": "List analysis dependencies.\nfilters:\n- name\n- version\n- sha\n- indirect\n- labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Analysis ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.TechDependency"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{id}/issues": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "List issues for an analysis.",
        "description": "List issues for an analysis.\nfilters:\n- ruleset\n- rule\n- name\n- category\n- effort\n- labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Analysis ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/application/{id}/analyses": {
      "post": {
        "tags": [
          "analyses"
        ],
        "summary": "Create an analysis.",
        "description": "Create an analysis.\nForm fields:\n- file: file that contains the api.Analysis resource.\n- issues: file that multiple api.Issue resources.\n- dependencies: file that multiple api.TechDependency resources.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Analysis"
                }
              }
            }
          }
        }
      }
    },
    "/application/{id}/analysis/dependencies": {
      "get": {
        "tags": [
          "dependencies"
        ],
        "summary": "List application dependencies.",
        "description": "List application dependencies.\nfilters:\n- name\n- version\n- sha\n- indirect\n- labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.TechDependency"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/application/{id}/analysis/issues": {
      "get": {
        "tags": [
          "issues"
        ],
        "summary": "List application issues.",
        "description": "List application issues.\nfilters:\n- ruleset\n- rule\n- name\n- category\n- effort\n- labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/applications": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "List all applications.",
        "description": "List all applications.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Application"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Create an application.",
        "description": "Create an application.",
        "requestBody": {
          "description": "Application data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Application"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Application"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "application"
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete a applications.",
        "description": "Delete applications.",
        "requestBody": {
          "description": "List of id",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "application"
      }
    },
    "/applications/{id}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Get an application by ID.",
        "description": "Get an application by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Application"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Update an application.",
        "description": "Update an application.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Application data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Application"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "application"
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete an application.",
        "description": "Delete an application.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/applications/{id}/analysis": {
      "get": {
        "tags": [
          "analyses"
        ],
        "summary": "Get the latest analysis.",
        "description": "Get the latest analysis for an application.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/api.Analysis"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/analysis/report": {
      "get": {
        "tags": [
          "analyses"
        ],
        "summary": "Get the latest analysis (static) report.",
        "description": "Get the latest analysis (static) report.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/applications/{id}/assessments": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "List the assessments of an Application and any it inherits from its archetypes.",
        "description": "List the assessments of an Application and any it inherits from its archetypes.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Assessment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Create an application assessment.",
        "description": "Create an application assessment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Assessment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Assessment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Assessment"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "assessment"
      }
    },
    "/applications/{id}/bucket/{wildcard}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Get bucket content by ID and path.",
        "description": "Get bucket content by ID and path.\nReturns index.html for directories when Accept=text/html else a tarball.\n?filter=glob supports directory content filtering.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Upload bucket content by ID and path.",
        "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete bucket content by ID and path.",
        "description": "Delete bucket content by ID and path.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/applications/{id}/facts": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Create a fact.",
        "description": "Create a fact.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Fact data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Fact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "fact"
      }
    },
    "/applications/{id}/facts/{key}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Get fact by name.",
        "description": "Get fact by name.\nsee api.FactKey for details on key parameter format.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Fact key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Update (or create) a fact.",
        "description": "Update (or create) a fact.\nsee api.FactKey for details on key parameter format.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Fact key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fact value",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "fact"
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete a fact.",
        "description": "Delete a fact.\nsee api.FactKey for details on key parameter format.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Fact key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/applications/{id}/facts/{source}:": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "List facts.",
        "description": "List facts by source.\nsee api.FactKey for details on key parameter format.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "source",
            "in": "path",
            "description": "Source key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.FactMap"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Replace all facts from a source.",
        "description": "Replace all facts from a source.\nsee api.FactKey for details on key parameter format.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "source",
            "in": "path",
            "description": "Fact key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fact map",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.FactMap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "factmap"
      }
    },
    "/applications/{id}/stakeholders": {
      "patch": {
        "tags": [
          "applications"
        ],
        "summary": "Update the owner and contributors of an Application.",
        "description": "Update the owner and contributors of an Application.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Application stakeholders",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Stakeholders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "application"
      }
    },
    "/applications/{id}/tags": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "List tag references.",
        "description": "List tag references.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Ref"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Add tag association.",
        "description": "Ensure tag is associated with the application.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Tag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Ref"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Ref"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tag"
      },
      "patch": {
        "tags": [
          "applications"
        ],
        "summary": "Replace tag associations.",
        "description": "Replace tag associations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Source",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Tag references",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/api.TagRef"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "tags"
      }
    },
    "/applications/{id}/tags/{sid}": {
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete tag association.",
        "description": "Ensure tag is not associated with the application.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sid",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/archetypes": {
      "get": {
        "tags": [
          "archetypes"
        ],
        "summary": "List all archetypes.",
        "description": "List all archetypes.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Archetype"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "archetypes"
        ],
        "summary": "Create an archetype.",
        "description": "Create an archetype.",
        "requestBody": {
          "description": "Archetype data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Archetype"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Archetype"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "archetype"
      }
    },
    "/archetypes/{id}": {
      "get": {
        "tags": [
          "archetypes"
        ],
        "summary": "Get an archetype by ID.",
        "description": "Get an archetype by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Archetype ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Archetype"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "archetypes"
        ],
        "summary": "Update an archetype.",
        "description": "Update an archetype.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Archetype ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Archetype data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Archetype"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "archetype"
      },
      "delete": {
        "tags": [
          "archetypes"
        ],
        "summary": "Delete an archetype.",
        "description": "Delete an archetype.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Archetype ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/archetypes/{id}/assessments": {
      "get": {
        "tags": [
          "archetypes"
        ],
        "summary": "List the assessments of an archetype.",
        "description": "List the assessments of an archetype.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Archetype ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Assessment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "archetypes"
        ],
        "summary": "Create an archetype assessment.",
        "description": "Create an archetype assessment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Archetype ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Assessment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Assessment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Assessment"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "assessment"
      }
    },
    "/assessments": {
      "get": {
        "tags": [
          "assessments"
        ],
        "summary": "List all assessments.",
        "description": "List all assessments.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Assessment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assessments/{id}": {
      "get": {
        "tags": [
          "questionnaires"
        ],
        "summary": "Get an assessment by ID.",
        "description": "Get an assessment by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Assessment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assessments"
        ],
        "summary": "Update an assessment.",
        "description": "Update an assessment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Assessment data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Assessment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "assessment"
      },
      "delete": {
        "tags": [
          "assessments"
        ],
        "summary": "Delete an assessment.",
        "description": "Delete an assessment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login and obtain a bearer token.",
        "description": "Login and obtain a bearer token.",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Login"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Refresh bearer token.",
        "description": "Refresh bearer token.",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Login"
                }
              }
            }
          }
        }
      }
    },
    "/batch/tags": {
      "post": {
        "tags": [
          "batch",
          "tags"
        ],
        "summary": "Batch-create Tags.",
        "description": "Batch-create Tags.",
        "requestBody": {
          "description": "Tags data",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/api.Tag"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Tag"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tags"
      }
    },
    "/batch/tickets": {
      "post": {
        "tags": [
          "batch",
          "tickets"
        ],
        "summary": "Batch-create Tickets.",
        "description": "Batch-create Tickets.",
        "requestBody": {
          "description": "Tickets data",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/api.Ticket"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Ticket"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tickets"
      }
    },
    "/buckets": {
      "get": {
        "tags": [
          "buckets"
        ],
        "summary": "List all buckets.",
        "description": "List all buckets.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Bucket"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "buckets"
        ],
        "summary": "Create a bucket.",
        "description": "Create a bucket.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Bucket name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Bucket"
                }
              }
            }
          }
        }
      }
    },
    "/buckets/{id}": {
      "get": {
        "tags": [
          "buckets"
        ],
        "summary": "Get a bucket by ID.",
        "description": "Get a bucket by ID.\nReturns api.Bucket when Accept=application/json.\nElse returns index.html when Accept=text/html.\nElse returns tarball.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bucket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/api.Bucket"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "buckets"
        ],
        "summary": "Delete a bucket.",
        "description": "Delete a bucket.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bucket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/buckets/{id}/{wildcard}": {
      "get": {
        "tags": [
          "buckets"
        ],
        "summary": "Get bucket content by ID and path.",
        "description": "Get bucket content by ID and path.\nWhen path is FILE, returns file content.\nWhen path is DIRECTORY and Accept=text/html returns index.html.\n?filter=glob supports directory content filtering.\nElse returns a tarball.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "buckets"
        ],
        "summary": "Upload bucket content by ID and path.",
        "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bucket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "buckets"
        ],
        "summary": "Delete bucket content by ID and path.",
        "description": "Delete bucket content by ID and path.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bucket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/businessservices": {
      "get": {
        "tags": [
          "businessservices"
        ],
        "summary": "List all business services.",
        "description": "List all business services.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.BusinessService"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "businessservices"
        ],
        "summary": "Create a business service.",
        "description": "Create a business service.",
        "requestBody": {
          "description": "Business service data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.BusinessService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.BusinessService"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "business_service"
      }
    },
    "/businessservices/{id}": {
      "get": {
        "tags": [
          "businessservices"
        ],
        "summary": "Get a business service by ID.",
        "description": "Get a business service by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Business Service ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.BusinessService"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "businessservices"
        ],
        "summary": "Update a business service.",
        "description": "Update a business service.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Business service ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Business service data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.BusinessService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "business_service"
      },
      "delete": {
        "tags": [
          "businessservices"
        ],
        "summary": "Delete a business service.",
        "description": "Delete a business service.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Business service ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/cache": {
      "delete": {
        "tags": [
          "cache"
        ],
        "summary": "Delete a directory within the cache.",
        "description": "Delete a directory within the cache.",
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/caches/{wildcard}": {
      "get": {
        "tags": [
          "cache"
        ],
        "summary": "Get the cache.",
        "description": "Get the cache.",
        "parameters": [
          {
            "name": "wildcard",
            "in": "path",
            "description": "Cache DIR",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Cache"
                }
              }
            }
          }
        }
      }
    },
    "/dependencies": {
      "get": {
        "tags": [
          "dependencies"
        ],
        "summary": "List all dependencies.",
        "description": "List all dependencies.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Dependency"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dependencies"
        ],
        "summary": "Create a dependency.",
        "description": "Create a dependency.",
        "requestBody": {
          "description": "Dependency data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Dependency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Dependency"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "applications_dependency"
      }
    },
    "/dependencies/{id}": {
      "get": {
        "tags": [
          "dependencies"
        ],
        "summary": "Get a dependency by ID.",
        "description": "Get a dependency by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dependency ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Dependency"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dependencies"
        ],
        "summary": "Delete a dependency.",
        "description": "Delete a dependency.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dependency id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "List all files.",
        "description": "List all files.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.File"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "summary": "Create a file.",
        "description": "Create a file.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "File name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.File"
                }
              }
            }
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "Get a file by ID.",
        "description": "Get a file by ID. Returns api.File when Accept=application/json else the file content.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/api.File"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "file"
        ],
        "summary": "Append a file.",
        "description": "Append a file.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "file"
        ],
        "summary": "Delete a file.",
        "description": "Delete a file.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/identities": {
      "get": {
        "tags": [
          "identities"
        ],
        "summary": "List all identities.",
        "description": "List all identities.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Identity"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "identities"
        ],
        "summary": "Create an identity.",
        "description": "Create an identity.",
        "requestBody": {
          "description": "Identity data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Identity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Identity"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "identity"
      }
    },
    "/identities/{id}": {
      "get": {
        "tags": [
          "identities"
        ],
        "summary": "Get an identity by ID.",
        "description": "Get an identity by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identity ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Identity"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "identities"
        ],
        "summary": "Update an identity.",
        "description": "Update an identity.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identity ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Identity data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Identity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "identity"
      },
      "delete": {
        "tags": [
          "identities"
        ],
        "summary": "Delete an identity.",
        "description": "Delete an identity.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identity ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/imports": {
      "get": {
        "tags": [
          "imports"
        ],
        "summary": "List imports.",
        "description": "List imports.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Import"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/imports/{id}": {
      "get": {
        "tags": [
          "imports"
        ],
        "summary": "Get an import by ID.",
        "description": "Get an import by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Import ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Import"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "imports"
        ],
        "summary": "Delete an import.",
        "description": "Delete an import. This leaves any created application or dependency.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Import ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/importsummaries": {
      "get": {
        "tags": [
          "imports"
        ],
        "summary": "List import summaries.",
        "description": "List import summaries.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.ImportSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/importsummaries/download": {
      "get": {
        "tags": [
          "imports"
        ],
        "summary": "Export the source CSV for a particular import summary.",
        "description": "Export the source CSV for a particular import summary.",
        "parameters": [
          {
            "name": "importSummary.id",
            "in": "query",
            "description": "ImportSummary ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/importsummaries/upload": {
      "post": {
        "tags": [
          "imports"
        ],
        "summary": "Upload a CSV containing applications and dependencies to import.",
        "description": "Upload a CSV containing applications and dependencies to import.",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.ImportSummary"
                }
              }
            }
          }
        }
      }
    },
    "/importsummaries/{id}": {
      "get": {
        "tags": [
          "imports"
        ],
        "summary": "Get an import summary by ID.",
        "description": "Get an import by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ImportSummary ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.ImportSummary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "imports"
        ],
        "summary": "Delete an import summary and associated import records.",
        "description": "Delete an import summary and associated import records.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ImportSummary ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/jobfunctions": {
      "get": {
        "tags": [
          "jobfunctions"
        ],
        "summary": "List all job functions.",
        "description": "List all job functions.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.JobFunction"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "jobfunctions"
        ],
        "summary": "Create a job function.",
        "description": "Create a job function.",
        "requestBody": {
          "description": "Job Function data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.JobFunction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.JobFunction"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "job_function"
      }
    },
    "/jobfunctions/{id}": {
      "get": {
        "tags": [
          "jobfunctions"
        ],
        "summary": "Get a job function by ID.",
        "description": "Get a job function by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Function ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.JobFunction"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "jobfunctions"
        ],
        "summary": "Update a job function.",
        "description": "Update a job function.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Function ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Job Function data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.JobFunction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "job_function"
      },
      "delete": {
        "tags": [
          "jobfunctions"
        ],
        "summary": "Delete a job function.",
        "description": "Delete a job function.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Function ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "metrics"
        ],
        "summary": "Get Prometheus metrics.",
        "description": "Get Prometheus metrics.\nWrapper for Prometheus-supplied handler.\nServed on port defined by METRICS_PORT environment variable.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/migrationwaves": {
      "get": {
        "tags": [
          "migrationwaves"
        ],
        "summary": "List all migration waves.",
        "description": "List all migration waves.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.MigrationWave"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "migrationwaves"
        ],
        "summary": "Create a migration wave.",
        "description": "Create a migration wave.",
        "requestBody": {
          "description": "Migration Wave data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.MigrationWave"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.MigrationWave"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "migrationwave"
      }
    },
    "/migrationwaves/{id}": {
      "get": {
        "tags": [
          "migrationwaves"
        ],
        "summary": "Get a migration wave by ID.",
        "description": "Get a migration wave by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Migration Wave ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.MigrationWave"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "migrationwaves"
        ],
        "summary": "Update a migration wave.",
        "description": "Update a migration wave.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "MigrationWave id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "MigrationWave data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.MigrationWave"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "migrationWave"
      },
      "delete": {
        "tags": [
          "migrationwaves"
        ],
        "summary": "Delete a migration wave.",
        "description": "Delete a migration wave.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "MigrationWave id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/proxies": {
      "get": {
        "tags": [
          "proxies"
        ],
        "summary": "List all proxies.",
        "description": "List all proxies.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Proxy"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "proxies"
        ],
        "summary": "Create an proxy.",
        "description": "Create an proxy.",
        "requestBody": {
          "description": "Proxy data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Proxy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Proxy"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "proxy"
      }
    },
    "/proxies/{id}": {
      "get": {
        "tags": [
          "proxies"
        ],
        "summary": "Get an proxy by ID.",
        "description": "Get an proxy by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proxy ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Proxy"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "proxies"
        ],
        "summary": "Update an proxy.",
        "description": "Update an proxy.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proxy ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Proxy data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Proxy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "proxy"
      },
      "delete": {
        "tags": [
          "proxies"
        ],
        "summary": "Delete an proxy.",
        "description": "Delete an proxy.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proxy ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/questionnaires": {
      "get": {
        "tags": [
          "questionnaires"
        ],
        "summary": "List all questionnaires.",
        "description": "List all questionnaires.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Questionnaire"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "questionnaires"
        ],
        "summary": "Create a questionnaire.",
        "description": "Create a questionnaire.",
        "requestBody": {
          "description": "Questionnaire data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Questionnaire"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Questionnaire"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "questionnaire"
      }
    },
    "/questionnaires/{id}": {
      "get": {
        "tags": [
          "questionnaires"
        ],
        "summary": "Get a questionnaire by ID.",
        "description": "Get a questionnaire by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Questionnaire ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Questionnaire"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "questionnaires"
        ],
        "summary": "Update a questionnaire.",
        "description": "Update a questionnaire. If the Questionnaire\nis builtin, only its \"required\" field can be changed\nand all other fields will be ignored.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Questionnaire ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Questionnaire data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Questionnaire"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "questionnaire"
      },
      "delete": {
        "tags": [
          "questionnaires"
        ],
        "summary": "Delete a questionnaire.",
        "description": "Delete a questionnaire.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Questionnaire ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "List all reviews.",
        "description": "List all reviews.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Review"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "reviews"
        ],
        "summary": "Create a review.",
        "description": "Create a review.",
        "requestBody": {
          "description": "Review data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Review"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Review"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "review"
      }
    },
    "/reviews/copy": {
      "post": {
        "tags": [
          "reviews"
        ],
        "summary": "Copy a review from one application to others.",
        "description": "Copy a review from one application to others.",
        "requestBody": {
          "description": "Review copy request data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.CopyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "copy_request"
      }
    },
    "/reviews/{id}": {
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "Get a review by ID.",
        "description": "Get a review by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Review ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Review"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "reviews"
        ],
        "summary": "Update a review.",
        "description": "Update a review.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Review ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Review data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Review"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "review"
      },
      "delete": {
        "tags": [
          "reviews"
        ],
        "summary": "Delete a review.",
        "description": "Delete a review.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Review ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/rulesets": {
      "get": {
        "tags": [
          "rulesets"
        ],
        "summary": "List all bindings.",
        "description": "List all bindings.\nfilters:\n- name\n- labels",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.RuleSet"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "rulesets"
        ],
        "summary": "Create a ruleset.",
        "description": "Create a ruleset.",
        "requestBody": {
          "description": "RuleSet data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.RuleSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.RuleSet"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "ruleBundle"
      }
    },
    "/rulesets/{id}": {
      "get": {
        "tags": [
          "rulesets"
        ],
        "summary": "Get a RuleSet by ID.",
        "description": "Get a RuleSet by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "RuleSet ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.RuleSet"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "rulesets"
        ],
        "summary": "Update a ruleset.",
        "description": "Update a ruleset.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "RuleSet ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "RuleSet data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.RuleSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ruleBundle"
      },
      "delete": {
        "tags": [
          "rulesets"
        ],
        "summary": "Delete a ruleset.",
        "description": "Delete a ruleset.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "RuleSet ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/schema": {
      "get": {
        "tags": [
          "schema"
        ],
        "summary": "Get the API schema.",
        "description": "Get the API schema.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Schema"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "List all settings.",
        "description": "List all settings.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Setting"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Create a setting.",
        "description": "Create a setting.",
        "requestBody": {
          "description": "Setting data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Setting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Setting"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "setting"
      }
    },
    "/settings/{key}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get a setting by its key.",
        "description": "Get a setting by its key.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Setting"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Update a setting.",
        "description": "Update a setting.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Create a setting.",
        "description": "Create a setting.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Setting value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Setting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "setting"
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Delete a setting.",
        "description": "Delete a setting.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/stakeholdergroups": {
      "get": {
        "tags": [
          "stakeholdergroups"
        ],
        "summary": "List all stakeholder groups.",
        "description": "List all stakeholder groups.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.StakeholderGroup"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "stakeholdergroups"
        ],
        "summary": "Create a stakeholder group.",
        "description": "Create a stakeholder group.",
        "requestBody": {
          "description": "Stakeholder Group data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.StakeholderGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.StakeholderGroup"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "stakeholder_group"
      }
    },
    "/stakeholdergroups/{id}": {
      "get": {
        "tags": [
          "stakeholdergroups"
        ],
        "summary": "Get a stakeholder group by ID.",
        "description": "Get a stakeholder group by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stakeholder Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.StakeholderGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "stakeholdergroups"
        ],
        "summary": "Update a stakeholder group.",
        "description": "Update a stakeholder group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stakeholder Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Stakeholder Group data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.StakeholderGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "stakeholder_group"
      },
      "delete": {
        "tags": [
          "stakeholdergroups"
        ],
        "summary": "Delete a stakeholder group.",
        "description": "Delete a stakeholder group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stakeholder Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/stakeholders": {
      "get": {
        "tags": [
          "stakeholders"
        ],
        "summary": "List all stakeholders.",
        "description": "List all stakeholders.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Stakeholder"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "stakeholders"
        ],
        "summary": "Create a stakeholder.",
        "description": "Create a stakeholder.",
        "requestBody": {
          "description": "Stakeholder data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Stakeholder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Stakeholder"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "stakeholder"
      }
    },
    "/stakeholders/{id}": {
      "get": {
        "tags": [
          "stakeholders"
        ],
        "summary": "Get a stakeholder by ID.",
        "description": "Get a stakeholder by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stakeholder ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Stakeholder"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "stakeholders"
        ],
        "summary": "Update a stakeholder.",
        "description": "Update a stakeholder.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stakeholder ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Stakeholder data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Stakeholder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "stakeholder"
      },
      "delete": {
        "tags": [
          "stakeholders"
        ],
        "summary": "Delete a stakeholder.",
        "description": "Delete a stakeholder.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stakeholder ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/tagcategories": {
      "get": {
        "tags": [
          "tagcategories"
        ],
        "summary": "List all tag categories.",
        "description": "List all tag categories.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Optional category name filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.TagCategory"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tagcategories"
        ],
        "summary": "Create a tag category.",
        "description": "Create a tag category.",
        "requestBody": {
          "description": "Tag Category data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.TagCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.TagCategory"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tag_type"
      }
    },
    "/tagcategories/{id}": {
      "get": {
        "tags": [
          "tagcategories"
        ],
        "summary": "Get a tag category by ID.",
        "description": "Get a tag category by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.TagCategory"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tagcategories"
        ],
        "summary": "Update a tag category.",
        "description": "Update a tag category.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Tag Category data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.TagCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "tag_type"
      },
      "delete": {
        "tags": [
          "tagcategories"
        ],
        "summary": "Delete a tag category.",
        "description": "Delete a tag category.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/tagcategories/{id}/tags": {
      "get": {
        "tags": [
          "tagcategories"
        ],
        "summary": "List the tags in the tag category.",
        "description": "List the tags in the tag category.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag Category ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional tag name filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List all tags.",
        "description": "List all tags.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Tag"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Create a tag.",
        "description": "Create a tag.",
        "requestBody": {
          "description": "Tag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Tag"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tag"
      }
    },
    "/tags/{id}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get a tag by ID.",
        "description": "Get a tag by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Tag"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tags"
        ],
        "summary": "Update a tag.",
        "description": "Update a tag.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Tag data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "tag"
      },
      "delete": {
        "tags": [
          "tags"
        ],
        "summary": "Delete a tag.",
        "description": "Delete a tag.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/targets": {
      "get": {
        "tags": [
          "targets"
        ],
        "summary": "List all targets.",
        "description": "List all targets.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Target"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "targets"
        ],
        "summary": "Create a target.",
        "description": "Create a target.",
        "requestBody": {
          "description": "Target data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Target"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Target"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "target"
      }
    },
    "/targets/{id}": {
      "get": {
        "tags": [
          "targets"
        ],
        "summary": "Get a Target by ID.",
        "description": "Get a Target by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Target ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Target"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "targets"
        ],
        "summary": "Update a target.",
        "description": "Update a target.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Target ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Target data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Target"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "target"
      },
      "delete": {
        "tags": [
          "targets"
        ],
        "summary": "Delete a target.",
        "description": "Delete a target.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Target ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/taskgroups": {
      "get": {
        "tags": [
          "taskgroups"
        ],
        "summary": "List all task groups.",
        "description": "List all task groups.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.TaskGroup"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Create a task group.",
        "description": "Create a task group.",
        "requestBody": {
          "description": "TaskGroup data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.TaskGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.TaskGroup"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "taskgroup"
      }
    },
    "/taskgroups/{id}": {
      "get": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Get a task group by ID.",
        "description": "Get a task group by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TaskGroup ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.TaskGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Update a task group.",
        "description": "Update a task group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Task data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.TaskGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "task"
      },
      "delete": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Delete a task group.",
        "description": "Delete a task group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TaskGroup ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/taskgroups/{id}/bucket/{wildcard}": {
      "get": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Get bucket content by ID and path.",
        "description": "Get bucket content by ID and path.\nReturns index.html for directories when Accept=text/html else a tarball.\n?filter=glob supports directory content filtering.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TaskGroup ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Upload bucket content by ID and path.",
        "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TaskGroup ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Delete bucket content by ID and path.",
        "description": "Delete bucket content by ID and path.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/taskgroups/{id}/submit": {
      "put": {
        "tags": [
          "taskgroups"
        ],
        "summary": "Submit a task group.",
        "description": "Patch and submit a task group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TaskGroup ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "TaskGroup data (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.TaskGroup"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "taskgroup"
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Queued queued task report.",
        "description": "Queued queued task report.\nFilters:\n- addon",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.TaskQueue"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create a task.",
        "description": "Create a task.",
        "requestBody": {
          "description": "Task data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Task"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "task"
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get a task by ID.",
        "description": "Get a task by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Task"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Update a task.",
        "description": "Update a task.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Task data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "task"
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a task.",
        "description": "Delete a task.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/tasks/{id}/attached": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get attached files.",
        "description": "Get attached files.\nReturns a tarball with attached files.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/tasks/{id}/bucket/{wildcard}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get bucket content by ID and path.",
        "description": "Get bucket content by ID and path.\nReturns index.html for directories when Accept=text/html else a tarball.\n?filter=glob supports directory content filtering.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Upload bucket content by ID and path.",
        "description": "Upload bucket content by ID and path (handles both [post] and [put] requests).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete bucket content by ID and path.",
        "description": "Delete bucket content by ID and path.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "wildcard",
            "in": "path",
            "description": "Content path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/tasks/{id}/cancel": {
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Cancel a task.",
        "description": "Cancel a task.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {}
          }
        }
      }
    },
    "/tasks/{id}/report": {
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Update a task report.",
        "description": "Update a task report.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "TaskReport data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.TaskReport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "task"
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create a task report.",
        "description": "Update a task report.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "TaskReport data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.TaskReport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.TaskReport"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "task"
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a task report.",
        "description": "Delete a task report.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/tasks/{id}/submit": {
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Submit a task.",
        "description": "Patch and submit a task.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Task data (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Task"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "task"
      }
    },
    "/tickets": {
      "get": {
        "tags": [
          "tickets"
        ],
        "summary": "List all tickets.",
        "description": "List all tickets.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Ticket"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tickets"
        ],
        "summary": "Create a ticket.",
        "description": "Create a ticket.",
        "requestBody": {
          "description": "Ticket data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Ticket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Ticket"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "ticket"
      }
    },
    "/tickets/{id}": {
      "get": {
        "tags": [
          "tickets"
        ],
        "summary": "Get a ticket by ID.",
        "description": "Get a ticket by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Ticket"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tickets"
        ],
        "summary": "Delete a ticket.",
        "description": "Delete a ticket.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/trackers": {
      "get": {
        "tags": [
          "trackers"
        ],
        "summary": "List all trackers.",
        "description": "List all trackers.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Tracker"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "trackers"
        ],
        "summary": "Create a tracker.",
        "description": "Create a tracker.",
        "requestBody": {
          "description": "Tracker data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Tracker"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Tracker"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tracker"
      }
    },
    "/trackers/{id}": {
      "get": {
        "tags": [
          "trackers"
        ],
        "summary": "Get a tracker by ID.",
        "description": "Get a tracker by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tracker ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Tracker"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "trackers"
        ],
        "summary": "Update a tracker.",
        "description": "Update a tracker.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tracker id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Tracker data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api.Tracker"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "application"
      },
      "delete": {
        "tags": [
          "trackers"
        ],
        "summary": "Delete a tracker.",
        "description": "Delete a tracker.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tracker id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/trackers/{id}/projects": {
      "get": {
        "tags": [
          "trackers"
        ],
        "summary": "List a tracker's projects.",
        "description": "List a tracker's projects.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tracker ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.Project"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/trackers/{id}/projects/{id2}": {
      "get": {
        "tags": [
          "trackers"
        ],
        "summary": "Get a tracker project by ID.",
        "description": "Get a tracker project by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tracker ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id2",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Project"
                }
              }
            }
          }
        }
      }
    },
    "/trackers/{id}/projects/{id2}/issuetypes": {
      "get": {
        "tags": [
          "trackers"
        ],
        "summary": "List a tracker project's issue types.",
        "description": "List a tracker project's issue types.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tracker ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id2",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api.IssueType"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "api.Addon": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/v1.Container"
          },
          "extensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Extension"
            }
          },
          "metadata": {
            "type": "object"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.Analysis": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "archived": {
            "type": "boolean"
          },
          "commit": {
            "type": "string"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.TechDependency"
            }
          },
          "effort": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Issue"
            }
          },
          "summary": {
            "type": "object",
            "properties": {}
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Application": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "archetypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "assessed": {
            "type": "boolean"
          },
          "assessments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "binary": {
            "type": "string"
          },
          "bucket": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "businessService": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "comments": {
            "type": "string"
          },
          "confidence": {
            "type": "integer"
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effort": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "migrationWave": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "repository": {
            "$ref": "#/components/schemas/api.Repository"
          },
          "review": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "risk": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.TagRef"
            }
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Archetype": {
        "type": "object",
        "properties": {
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "assessed": {
            "type": "boolean"
          },
          "assessments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "comments": {
            "type": "string"
          },
          "confidence": {
            "type": "integer"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "criteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.TagRef"
            }
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "review": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "risk": {
            "type": "string"
          },
          "stakeholderGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "stakeholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.TagRef"
            }
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Assessment": {
        "required": [
          "questionnaire"
        ],
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "archetype": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "confidence": {
            "type": "integer"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "questionnaire": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "required": {
            "type": "boolean"
          },
          "risk": {
            "type": "string",
            "description": "read only"
          },
          "riskMessages": {
            "$ref": "#/components/schemas/assessment.RiskMessages"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.Section"
            }
          },
          "stakeholderGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "stakeholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "status": {
            "type": "string"
          },
          "thresholds": {
            "$ref": "#/components/schemas/assessment.Thresholds"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Attachment": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "activity": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.Bucket": {
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "path": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.BusinessService": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Cache": {
        "type": "object",
        "properties": {
          "capacity": {
            "type": "string"
          },
          "exists": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "used": {
            "type": "string"
          }
        }
      },
      "api.CopyRequest": {
        "required": [
          "sourceReview",
          "targetApplications"
        ],
        "type": "object",
        "properties": {
          "sourceReview": {
            "type": "integer"
          },
          "targetApplications": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "api.DepAppReport": {
        "type": "object",
        "properties": {
          "businessService": {
            "type": "string"
          },
          "dependency": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "indirect": {
                "type": "boolean"
              },
              "labels": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string"
              },
              "provider": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            }
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.Dependency": {
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "from": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "id": {
            "type": "integer"
          },
          "to": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Extension": {
        "type": "object",
        "properties": {
          "addon": {
            "type": "string"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "container": {
            "$ref": "#/components/schemas/v1.Container"
          },
          "metadata": {
            "type": "object"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.Fact": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "api.FactMap": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "api.Fields": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "api.File": {
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.FileReport": {
        "type": "object",
        "properties": {
          "effort": {
            "type": "integer"
          },
          "file": {
            "type": "string"
          },
          "incidents": {
            "type": "integer"
          },
          "issueId": {
            "type": "integer"
          }
        }
      },
      "api.Identity": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "key": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "settings": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        }
      },
      "api.Import": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "api.ImportSummary": {
        "type": "object",
        "properties": {
          "createEntities": {
            "type": "boolean"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "importStatus": {
            "type": "string"
          },
          "importTime": {
            "type": "string"
          },
          "invalidCount": {
            "type": "integer"
          },
          "updateUser": {
            "type": "string"
          },
          "validCount": {
            "type": "integer"
          }
        }
      },
      "api.Incident": {
        "type": "object",
        "properties": {
          "codeSnip": {
            "type": "string"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "facts": {
            "$ref": "#/components/schemas/api.FactMap"
          },
          "file": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "issue": {
            "type": "integer"
          },
          "line": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Issue": {
        "required": [
          "category",
          "name",
          "rule",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "analysis": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effort": {
            "type": "integer"
          },
          "facts": {
            "$ref": "#/components/schemas/api.FactMap"
          },
          "id": {
            "type": "integer"
          },
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Incident"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Link"
            }
          },
          "name": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          },
          "ruleset": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.IssueAppReport": {
        "type": "object",
        "properties": {
          "businessService": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effort": {
            "type": "integer"
          },
          "files": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "incidents": {
            "type": "integer"
          },
          "issue": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "rule": {
                "type": "string"
              },
              "ruleset": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.IssueReport": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effort": {
            "type": "integer"
          },
          "files": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Link"
            }
          },
          "name": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          },
          "ruleset": {
            "type": "string"
          }
        }
      },
      "api.IssueType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.JobFunction": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "stakeholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Label": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.Link": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "api.Login": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "integer"
          },
          "password": {
            "type": "string"
          },
          "refresh": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        }
      },
      "api.MigrationWave": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "stakeholderGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "stakeholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "startDate": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.Proxy": {
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "excluded": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "host": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "identity": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "kind": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ]
          },
          "port": {
            "type": "integer"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Questionnaire": {
        "required": [
          "name",
          "riskMessages",
          "sections",
          "thresholds"
        ],
        "type": "object",
        "properties": {
          "builtin": {
            "type": "boolean"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "riskMessages": {
            "$ref": "#/components/schemas/assessment.RiskMessages"
          },
          "sections": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.Section"
            }
          },
          "thresholds": {
            "$ref": "#/components/schemas/assessment.Thresholds"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Ref": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "api.Repository": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "api.Review": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "archetype": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "businessCriticality": {
            "type": "integer"
          },
          "comments": {
            "type": "string"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "effortEstimate": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "proposedAction": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          },
          "workPriority": {
            "type": "integer"
          }
        }
      },
      "api.Rule": {
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "id": {
            "type": "integer"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.RuleReport": {
        "type": "object",
        "properties": {
          "applications": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effort": {
            "type": "integer"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Link"
            }
          },
          "name": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          },
          "ruleset": {
            "type": "string"
          }
        }
      },
      "api.RuleSet": {
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "dependsOn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "identity": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/api.Repository"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Rule"
            }
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Schema": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          }
        }
      },
      "api.Setting": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "api.Stakeholder": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "businessServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "contributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "jobFunction": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "migrationWaves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "name": {
            "type": "string"
          },
          "owns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "stakeholderGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.StakeholderGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "migrationWaves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "name": {
            "type": "string"
          },
          "stakeholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Stakeholders": {
        "type": "object",
        "properties": {
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/api.Ref"
          }
        }
      },
      "api.TTL": {
        "type": "object",
        "properties": {
          "created": {
            "type": "integer"
          },
          "failed": {
            "type": "integer"
          },
          "pending": {
            "type": "integer"
          },
          "running": {
            "type": "integer"
          },
          "succeeded": {
            "type": "integer"
          }
        }
      },
      "api.Tag": {
        "required": [
          "category",
          "name"
        ],
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.TagCategory": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "colour": {
            "type": "string"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "rank": {
            "type": "integer"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Ref"
            }
          },
          "updateUser": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "api.TagRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "virtual": {
            "type": "boolean"
          }
        }
      },
      "api.Target": {
        "type": "object",
        "properties": {
          "choice": {
            "type": "boolean"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "custom": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "image": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Label"
            }
          },
          "name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "ruleset": {
            "$ref": "#/components/schemas/api.RuleSet"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Task": {
        "type": "object",
        "properties": {
          "activity": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "addon": {
            "type": "string"
          },
          "application": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "attached": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Attachment"
            }
          },
          "bucket": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.TaskError"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.TaskEvent"
            }
          },
          "extensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "locator": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pod": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/api.TaskPolicy"
          },
          "priority": {
            "type": "integer"
          },
          "retries": {
            "type": "integer"
          },
          "started": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "terminated": {
            "type": "string"
          },
          "ttl": {
            "$ref": "#/components/schemas/api.TTL"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.TaskError": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          }
        }
      },
      "api.TaskEvent": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "api.TaskGroup": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "addon": {
            "type": "string"
          },
          "bucket": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {}
          },
          "extensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/api.TaskPolicy"
          },
          "priority": {
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Task"
            }
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.TaskPolicy": {
        "type": "object",
        "properties": {
          "isolated": {
            "type": "boolean"
          },
          "preemptEnabled": {
            "type": "boolean"
          },
          "preemptExempt": {
            "type": "boolean"
          }
        }
      },
      "api.TaskQueue": {
        "type": "object",
        "properties": {
          "pending": {
            "type": "integer"
          },
          "postponed": {
            "type": "integer"
          },
          "ready": {
            "type": "integer"
          },
          "running": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "api.TaskReport": {
        "type": "object",
        "properties": {
          "activity": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attached": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.Attachment"
            }
          },
          "completed": {
            "type": "integer"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/api.TaskError"
            }
          },
          "id": {
            "type": "integer"
          },
          "result": {
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "task": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.TechDependency": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "analysis": {
            "type": "integer"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "indirect": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "api.Ticket": {
        "required": [
          "application",
          "kind",
          "parent",
          "tracker"
        ],
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "error": {
            "type": "boolean"
          },
          "fields": {
            "$ref": "#/components/schemas/api.Fields"
          },
          "id": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tracker": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "updateUser": {
            "type": "string"
          }
        }
      },
      "api.Tracker": {
        "required": [
          "identity",
          "kind",
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "connected": {
            "type": "boolean"
          },
          "createTime": {
            "type": "string"
          },
          "createUser": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "identity": {
            "$ref": "#/components/schemas/api.Ref"
          },
          "insecure": {
            "type": "boolean"
          },
          "kind": {
            "type": "string",
            "enum": [
              "jira-cloud",
              "jira-onprem"
            ]
          },
          "lastUpdated": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updateUser": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "api.Vertex": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer"
          },
          "applicationName": {
            "type": "string"
          },
          "decision": {
            "type": "string"
          },
          "effort": {
            "type": "integer"
          },
          "effortEstimate": {
            "type": "string"
          },
          "positionX": {
            "type": "integer"
          },
          "positionY": {
            "type": "integer"
          }
        }
      },
      "assessment.Answer": {
        "required": [
          "order"
        ],
        "type": "object",
        "properties": {
          "applyTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.CategorizedTag"
            }
          },
          "autoAnswerFor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.CategorizedTag"
            }
          },
          "autoAnswered": {
            "type": "boolean"
          },
          "mitigation": {
            "type": "string"
          },
          "order": {
            "type": "integer"
          },
          "rationale": {
            "type": "string"
          },
          "risk": {
            "type": "string",
            "enum": [
              "red",
              "yellow",
              "green",
              "unknown"
            ]
          },
          "selected": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "assessment.CategorizedTag": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "assessment.Question": {
        "required": [
          "order"
        ],
        "type": "object",
        "properties": {
          "answers": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.Answer"
            }
          },
          "excludeFor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.CategorizedTag"
            }
          },
          "explanation": {
            "type": "string"
          },
          "includeFor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.CategorizedTag"
            }
          },
          "order": {
            "type": "integer"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "assessment.RiskMessages": {
        "type": "object",
        "properties": {
          "green": {
            "type": "string"
          },
          "red": {
            "type": "string"
          },
          "unknown": {
            "type": "string"
          },
          "yellow": {
            "type": "string"
          }
        }
      },
      "assessment.Section": {
        "required": [
          "order"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "type": "integer"
          },
          "questions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assessment.Question"
            }
          }
        }
      },
      "assessment.Thresholds": {
        "type": "object",
        "properties": {
          "red": {
            "type": "integer"
          },
          "unknown": {
            "type": "integer"
          },
          "yellow": {
            "type": "integer"
          }
        }
      },
      "intstr.IntOrString": {
        "type": "object",
        "properties": {
          "intVal": {
            "type": "integer"
          },
          "strVal": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/intstr.Type"
          }
        }
      },
      "intstr.Type": {
        "type": "integer",
        "enum": [
          0,
          1
        ],
        "x-enum-comments": {
          "Int": "The IntOrString holds an int.",
          "String": "The IntOrString holds a string."
        },
        "x-enum-varnames": [
          "Int",
          "String"
        ]
      },
      "resource.Quantity": {
        "type": "object",
        "properties": {
          "Format": {
            "type": "string",
            "enum": [
              "DecimalExponent",
              "BinarySI",
              "DecimalSI"
            ],
            "x-enum-varnames": [
              "DecimalExponent",
              "BinarySI",
              "DecimalSI"
            ],
            "x-enum-comments": {
              "BinarySI": "e.g., 12Mi (12 * 2^20)",
              "DecimalExponent": "e.g., 12e6",
              "DecimalSI": "e.g., 12M  (12 * 10^6)"
            }
          }
        }
      },
      "v1.Capabilities": {
        "type": "object",
        "properties": {
          "add": {
            "type": "array",
            "description": "Added capabilities\n+optional",
            "items": {
              "type": "string"
            }
          },
          "drop": {
            "type": "array",
            "description": "Removed capabilities\n+optional",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "v1.ConfigMapEnvSource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the ConfigMap must be defined\n+optional"
          }
        }
      },
      "v1.ConfigMapKeySelector": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key to select."
          },
          "name": {
            "type": "string",
            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the ConfigMap or its key must be defined\n+optional"
          }
        }
      },
      "v1.Container": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "description": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
            "items": {
              "type": "string"
            }
          },
          "command": {
            "type": "array",
            "description": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "type": "array",
            "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
            "items": {
              "$ref": "#/components/schemas/v1.EnvVar"
            }
          },
          "envFrom": {
            "type": "array",
            "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
            "items": {
              "$ref": "#/components/schemas/v1.EnvFromSource"
            }
          },
          "image": {
            "type": "string",
            "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional"
          },
          "imagePullPolicy": {
            "type": "object",
            "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.PullPolicy"
              }
            ]
          },
          "lifecycle": {
            "type": "object",
            "description": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.Lifecycle"
              }
            ]
          },
          "livenessProbe": {
            "type": "object",
            "description": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.Probe"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated."
          },
          "ports": {
            "type": "array",
            "description": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
            "items": {
              "$ref": "#/components/schemas/v1.ContainerPort"
            }
          },
          "readinessProbe": {
            "type": "object",
            "description": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.Probe"
              }
            ]
          },
          "resources": {
            "type": "object",
            "description": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ResourceRequirements"
              }
            ]
          },
          "securityContext": {
            "type": "object",
            "description": "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.SecurityContext"
              }
            ]
          },
          "startupProbe": {
            "type": "object",
            "description": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.Probe"
              }
            ]
          },
          "stdin": {
            "type": "boolean",
            "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional"
          },
          "stdinOnce": {
            "type": "boolean",
            "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional"
          },
          "terminationMessagePath": {
            "type": "string",
            "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional"
          },
          "terminationMessagePolicy": {
            "type": "object",
            "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.TerminationMessagePolicy"
              }
            ]
          },
          "tty": {
            "type": "boolean",
            "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional"
          },
          "volumeDevices": {
            "type": "array",
            "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
            "items": {
              "$ref": "#/components/schemas/v1.VolumeDevice"
            }
          },
          "volumeMounts": {
            "type": "array",
            "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
            "items": {
              "$ref": "#/components/schemas/v1.VolumeMount"
            }
          },
          "workingDir": {
            "type": "string",
            "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional"
          }
        }
      },
      "v1.ContainerPort": {
        "type": "object",
        "properties": {
          "containerPort": {
            "type": "integer",
            "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536."
          },
          "hostIP": {
            "type": "string",
            "description": "What host IP to bind the external port to.\n+optional"
          },
          "hostPort": {
            "type": "integer",
            "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional"
          },
          "name": {
            "type": "string",
            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional"
          },
          "protocol": {
            "type": "object",
            "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.Protocol"
              }
            ]
          }
        }
      },
      "v1.EnvFromSource": {
        "type": "object",
        "properties": {
          "configMapRef": {
            "type": "object",
            "description": "The ConfigMap to select from\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ConfigMapEnvSource"
              }
            ]
          },
          "prefix": {
            "type": "string",
            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional"
          },
          "secretRef": {
            "type": "object",
            "description": "The Secret to select from\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.SecretEnvSource"
              }
            ]
          }
        }
      },
      "v1.EnvVar": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the environment variable. Must be a C_IDENTIFIER."
          },
          "value": {
            "type": "string",
            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional"
          },
          "valueFrom": {
            "type": "object",
            "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.EnvVarSource"
              }
            ]
          }
        }
      },
      "v1.EnvVarSource": {
        "type": "object",
        "properties": {
          "configMapKeyRef": {
            "type": "object",
            "description": "Selects a key of a ConfigMap.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ConfigMapKeySelector"
              }
            ]
          },
          "fieldRef": {
            "type": "object",
            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ObjectFieldSelector"
              }
            ]
          },
          "resourceFieldRef": {
            "type": "object",
            "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ResourceFieldSelector"
              }
            ]
          },
          "secretKeyRef": {
            "type": "object",
            "description": "Selects a key of a secret in the pod's namespace\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.SecretKeySelector"
              }
            ]
          }
        }
      },
      "v1.ExecAction": {
        "type": "object",
        "properties": {
          "command": {
            "type": "array",
            "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "v1.GRPCAction": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "description": "Port number of the gRPC service. Number must be in the range 1 to 65535."
          },
          "service": {
            "type": "string",
            "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\""
          }
        }
      },
      "v1.HTTPGetAction": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional"
          },
          "httpHeaders": {
            "type": "array",
            "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional",
            "items": {
              "$ref": "#/components/schemas/v1.HTTPHeader"
            }
          },
          "path": {
            "type": "string",
            "description": "Path to access on the HTTP server.\n+optional"
          },
          "port": {
            "type": "object",
            "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
            "allOf": [
              {
                "$ref": "#/components/schemas/intstr.IntOrString"
              }
            ]
          },
          "scheme": {
            "type": "object",
            "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.URIScheme"
              }
            ]
          }
        }
      },
      "v1.HTTPHeader": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The header field name"
          },
          "value": {
            "type": "string",
            "description": "The header field value"
          }
        }
      },
      "v1.Lifecycle": {
        "type": "object",
        "properties": {
          "postStart": {
            "type": "object",
            "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.LifecycleHandler"
              }
            ]
          },
          "preStop": {
            "type": "object",
            "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.LifecycleHandler"
              }
            ]
          }
        }
      },
      "v1.LifecycleHandler": {
        "type": "object",
        "properties": {
          "exec": {
            "type": "object",
            "description": "Exec specifies the action to take.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ExecAction"
              }
            ]
          },
          "httpGet": {
            "type": "object",
            "description": "HTTPGet specifies the http request to perform.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.HTTPGetAction"
              }
            ]
          },
          "tcpSocket": {
            "type": "object",
            "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.TCPSocketAction"
              }
            ]
          }
        }
      },
      "v1.MountPropagationMode": {
        "type": "string",
        "enum": [
          "None",
          "HostToContainer",
          "Bidirectional"
        ],
        "x-enum-varnames": [
          "MountPropagationNone",
          "MountPropagationHostToContainer",
          "MountPropagationBidirectional"
        ]
      },
      "v1.ObjectFieldSelector": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional"
          },
          "fieldPath": {
            "type": "string",
            "description": "Path of the field to select in the specified API version."
          }
        }
      },
      "v1.Probe": {
        "type": "object",
        "properties": {
          "exec": {
            "type": "object",
            "description": "Exec specifies the action to take.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ExecAction"
              }
            ]
          },
          "failureThreshold": {
            "type": "integer",
            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional"
          },
          "grpc": {
            "type": "object",
            "description": "GRPC specifies an action involving a GRPC port.\nThis is a beta field and requires enabling GRPCContainerProbe feature gate.\n+featureGate=GRPCContainerProbe\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.GRPCAction"
              }
            ]
          },
          "httpGet": {
            "type": "object",
            "description": "HTTPGet specifies the http request to perform.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.HTTPGetAction"
              }
            ]
          },
          "initialDelaySeconds": {
            "type": "integer",
            "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
          },
          "periodSeconds": {
            "type": "integer",
            "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional"
          },
          "successThreshold": {
            "type": "integer",
            "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional"
          },
          "tcpSocket": {
            "type": "object",
            "description": "TCPSocket specifies an action involving a TCP port.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.TCPSocketAction"
              }
            ]
          },
          "terminationGracePeriodSeconds": {
            "type": "integer",
            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional"
          },
          "timeoutSeconds": {
            "type": "integer",
            "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
          }
        }
      },
      "v1.ProcMountType": {
        "type": "string",
        "enum": [
          "Default",
          "Unmasked"
        ],
        "x-enum-varnames": [
          "DefaultProcMount",
          "UnmaskedProcMount"
        ]
      },
      "v1.Protocol": {
        "type": "string",
        "enum": [
          "TCP",
          "UDP",
          "SCTP"
        ],
        "x-enum-varnames": [
          "ProtocolTCP",
          "ProtocolUDP",
          "ProtocolSCTP"
        ]
      },
      "v1.PullPolicy": {
        "type": "string",
        "enum": [
          "Always",
          "Never",
          "IfNotPresent"
        ],
        "x-enum-varnames": [
          "PullAlways",
          "PullNever",
          "PullIfNotPresent"
        ]
      },
      "v1.ResourceFieldSelector": {
        "type": "object",
        "properties": {
          "containerName": {
            "type": "string",
            "description": "Container name: required for volumes, optional for env vars\n+optional"
          },
          "divisor": {
            "type": "object",
            "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/resource.Quantity"
              }
            ]
          },
          "resource": {
            "type": "string",
            "description": "Required: resource to select"
          }
        }
      },
      "v1.ResourceList": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/resource.Quantity"
        }
      },
      "v1.ResourceRequirements": {
        "type": "object",
        "properties": {
          "limits": {
            "type": "object",
            "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ResourceList"
              }
            ]
          },
          "requests": {
            "type": "object",
            "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ResourceList"
              }
            ]
          }
        }
      },
      "v1.SELinuxOptions": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "Level is SELinux level label that applies to the container.\n+optional"
          },
          "role": {
            "type": "string",
            "description": "Role is a SELinux role label that applies to the container.\n+optional"
          },
          "type": {
            "type": "string",
            "description": "Type is a SELinux type label that applies to the container.\n+optional"
          },
          "user": {
            "type": "string",
            "description": "User is a SELinux user label that applies to the container.\n+optional"
          }
        }
      },
      "v1.SeccompProfile": {
        "type": "object",
        "properties": {
          "localhostProfile": {
            "type": "string",
            "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust only be set if type is \"Localhost\".\n+optional"
          },
          "type": {
            "type": "object",
            "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.SeccompProfileType"
              }
            ]
          }
        }
      },
      "v1.SeccompProfileType": {
        "type": "string",
        "enum": [
          "Unconfined",
          "RuntimeDefault",
          "Localhost"
        ],
        "x-enum-varnames": [
          "SeccompProfileTypeUnconfined",
          "SeccompProfileTypeRuntimeDefault",
          "SeccompProfileTypeLocalhost"
        ]
      },
      "v1.SecretEnvSource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the Secret must be defined\n+optional"
          }
        }
      },
      "v1.SecretKeySelector": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the secret to select from.  Must be a valid secret key."
          },
          "name": {
            "type": "string",
            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the Secret or its key must be defined\n+optional"
          }
        }
      },
      "v1.SecurityContext": {
        "type": "object",
        "properties": {
          "allowPrivilegeEscalation": {
            "type": "boolean",
            "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
          },
          "capabilities": {
            "type": "object",
            "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.Capabilities"
              }
            ]
          },
          "privileged": {
            "type": "boolean",
            "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
          },
          "procMount": {
            "type": "object",
            "description": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ProcMountType"
              }
            ]
          },
          "readOnlyRootFilesystem": {
            "type": "boolean",
            "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
          },
          "runAsGroup": {
            "type": "integer",
            "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
          },
          "runAsNonRoot": {
            "type": "boolean",
            "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional"
          },
          "runAsUser": {
            "type": "integer",
            "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
          },
          "seLinuxOptions": {
            "type": "object",
            "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.SELinuxOptions"
              }
            ]
          },
          "seccompProfile": {
            "type": "object",
            "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.SeccompProfile"
              }
            ]
          },
          "windowsOptions": {
            "type": "object",
            "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.WindowsSecurityContextOptions"
              }
            ]
          }
        }
      },
      "v1.TCPSocketAction": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional"
          },
          "port": {
            "type": "object",
            "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
            "allOf": [
              {
                "$ref": "#/components/schemas/intstr.IntOrString"
              }
            ]
          }
        }
      },
      "v1.TerminationMessagePolicy": {
        "type": "string",
        "enum": [
          "File",
          "FallbackToLogsOnError"
        ],
        "x-enum-varnames": [
          "TerminationMessageReadFile",
          "TerminationMessageFallbackToLogsOnError"
        ]
      },
      "v1.URIScheme": {
        "type": "string",
        "enum": [
          "HTTP",
          "HTTPS"
        ],
        "x-enum-varnames": [
          "URISchemeHTTP",
          "URISchemeHTTPS"
        ]
      },
      "v1.VolumeDevice": {
        "type": "object",
        "properties": {
          "devicePath": {
            "type": "string",
            "description": "devicePath is the path inside of the container that the device will be mapped to."
          },
          "name": {
            "type": "string",
            "description": "name must match the name of a persistentVolumeClaim in the pod"
          }
        }
      },
      "v1.VolumeMount": {
        "type": "object",
        "properties": {
          "mountPath": {
            "type": "string",
            "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'."
          },
          "mountPropagation": {
            "type": "object",
            "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\n+optional",
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.MountPropagationMode"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "This must match the Name of a Volume."
          },
          "readOnly": {
            "type": "boolean",
            "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional"
          },
          "subPath": {
            "type": "string",
            "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional"
          },
          "subPathExpr": {
            "type": "string",
            "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional"
          }
        }
      },
      "v1.WindowsSecurityContextOptions": {
        "type": "object",
        "properties": {
          "gmsaCredentialSpec": {
            "type": "string",
            "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional"
          },
          "gmsaCredentialSpecName": {
            "type": "string",
            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional"
          },
          "hostProcess": {
            "type": "boolean",
            "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nThis field is alpha-level and will only be honored by components that enable the\nWindowsHostProcessContainers feature flag. Setting this field without the feature\nflag will result in errors when validating the Pod. All of a Pod's containers must\nhave the same effective HostProcess value (it is not allowed to have a mix of HostProcess\ncontainers and non-HostProcess containers).  In addition, if HostProcess is true\nthen HostNetwork must also be set to true.\n+optional"
          },
          "runAsUserName": {
            "type": "string",
            "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional"
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}
