package addon // import "github.com/konveyor/tackle2-hub/addon"


CONSTANTS

const (
	EnvSharedDir = settings.EnvSharedPath
	EnvCacheDir  = settings.EnvCachePath
	EnvToken     = settings.EnvHubToken
	EnvTask      = settings.EnvTask
)
    Environment.


VARIABLES

var (
	Settings = &settings.Settings
	Log      = logr.WithName("addon")
)
var (
	EnvRegex = regexp.MustCompile(`(\$\()([^)]+)(\))`)
)

TYPES

type Adapter struct {
	// Task API.
	Task
	// Log API.
	Log logapi.Logger
	// Settings API.
	Setting Setting
	// Application API.
	Application Application
	// Identity API.
	Identity Identity
	// Proxy API.
	Proxy Proxy
	// TagCategory API.
	TagCategory TagCategory
	// Tag API.
	Tag Tag
	// File API.
	File File
	// RuleSet API
	RuleSet RuleSet

	// Has unexported fields.
}
    The Adapter provides hub/addon integration.

var Addon *Adapter
    Addon An addon adapter configured for a task execution.

func (h *Adapter) Run(addon func() error)
    Run addon. Reports:
      - Started
      - Succeeded
      - Failed (when addon returns error).

type Application = binding.Application
    Handler

type Bucket = binding.Bucket

type BucketContent = binding.BucketContent

type Client = binding.Client
    Client

type Conflict = binding.Conflict

type EnvInjector struct {
	// Has unexported fields.
}
    EnvInjector inject key into extension metadata.

func (r *EnvInjector) Inject(extension *api.Extension)
    Inject inject into extension metadata.

type File = binding.File

type Filter = binding.Filter
    Filter

type Identity = binding.Identity

type NotFound = binding.NotFound

type Param = binding.Param

type Params = binding.Params

type Path = binding.Path

type Proxy = binding.Proxy

type ResetError = binding.RestError
    Error

type RuleSet = binding.RuleSet

type Setting = binding.Setting

type SoftError struct {
	Reason string
}
    SoftError A "soft" anticipated error. Deprecated:

func (e *SoftError) Error() (s string)

func (e *SoftError) Is(err error) (matched bool)

func (e *SoftError) Soft() *SoftError

type Tag = binding.Tag

type TagCategory = binding.TagCategory

type Task struct {
	// Has unexported fields.
}
    Task API.

func (h *Task) Activity(entry string, v ...any)
    Activity report addon activity. The description can be a printf style
    format.

func (h *Task) Addon(inject bool) (r *api.Addon, err error)
    Addon returns the addon associated with the task. The extensions are
    filtered to include those specified in the task. inject: perform injection.

func (h *Task) Application() (r *api.Application, err error)
    Application returns the application associated with the task.

func (h *Task) Attach(f *api.File)
    Attach ensures the file is attached to the report associated with the last
    entry in the activity.

func (h *Task) AttachAt(f *api.File, activity int)
    AttachAt ensures the file is attached to the report indexed to the activity.
    The activity is a 1-based index. Zero(0) means NOT associated.

func (h *Task) Bucket() (b *binding.BucketContent)
    Bucket returns the bucket API.

func (h *Task) Completed(n int)
    Completed report addon completed (N) items.

func (h *Task) Data() (d any)
    Data returns the addon data.

func (h *Task) DataWith(object any) (err error)
    DataWith populates the addon data object.

func (h *Task) Error(error ...api.TaskError)
    Error report addon error.

func (h *Task) Errorf(severity, description string, v ...any)
    Errorf report addon error.

func (h *Task) Failed(reason string, v ...any)
    Failed report addon failed. The reason can be a printf style format.

func (h *Task) Increment()
    Increment report addon completed (+1) items.

func (h *Task) Load()
    Load a task by ID.

func (h *Task) Result(object api.Map)
    Result report addon result.

func (h *Task) Started()
    Started report addon started.

func (h *Task) Succeeded()
    Succeeded report addon succeeded.

func (h *Task) Total(n int)
    Total report addon total items.

