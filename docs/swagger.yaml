definitions:
  api.Addon:
    properties:
      image:
        type: string
      name:
        type: string
    type: object
  api.Application:
    properties:
      binary:
        type: string
      bucket:
        $ref: '#/definitions/api.Ref'
      businessService:
        $ref: '#/definitions/api.Ref'
      comments:
        type: string
      contributors:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      identities:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      migrationWave:
        $ref: '#/definitions/api.Ref'
      name:
        type: string
      owner:
        $ref: '#/definitions/api.Ref'
      repository:
        $ref: '#/definitions/api.Repository'
      review:
        $ref: '#/definitions/api.Ref'
      tags:
        items:
          $ref: '#/definitions/api.TagRef'
        type: array
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Bucket:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      expiration:
        type: string
      id:
        type: integer
      path:
        type: string
      updateUser:
        type: string
    type: object
  api.BusinessService:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      owner:
        $ref: '#/definitions/api.Ref'
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Cache:
    properties:
      capacity:
        type: string
      exists:
        type: boolean
      path:
        type: string
      used:
        type: string
    type: object
  api.CopyRequest:
    properties:
      sourceReview:
        type: integer
      targetApplications:
        items:
          type: integer
        type: array
    required:
    - sourceReview
    - targetApplications
    type: object
  api.Dependency:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      from:
        $ref: '#/definitions/api.Ref'
      id:
        type: integer
      to:
        $ref: '#/definitions/api.Ref'
      updateUser:
        type: string
    type: object
  api.DependencyGraph:
    type: object
  api.Fact:
    properties:
      key:
        type: string
      source:
        type: string
      value: {}
    type: object
  api.Fields:
    additionalProperties: true
    type: object
  api.File:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      expiration:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        type: string
      updateUser:
        type: string
    type: object
  api.Identity:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      key:
        type: string
      kind:
        type: string
      name:
        type: string
      password:
        type: string
      settings:
        type: string
      updateUser:
        type: string
      user:
        type: string
    required:
    - kind
    - name
    type: object
  api.Import:
    additionalProperties: true
    type: object
  api.ImportSummary:
    properties:
      createEntities:
        type: boolean
      createTime:
        type: string
      createUser:
        type: string
      filename:
        type: string
      id:
        type: integer
      importStatus:
        type: string
      importTime:
        type: string
      invalidCount:
        type: integer
      updateUser:
        type: string
      validCount:
        type: integer
    type: object
  api.JobFunction:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      name:
        type: string
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Login:
    properties:
      expiry:
        type: integer
      password:
        type: string
      refresh:
        type: string
      token:
        type: string
      user:
        type: string
    type: object
  api.Metadata:
    additionalProperties: true
    type: object
  api.MigrationWave:
    properties:
      applications:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      createTime:
        type: string
      createUser:
        type: string
      endDate:
        type: string
      id:
        type: integer
      name:
        type: string
      stakeholderGroups:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      startDate:
        type: string
      updateUser:
        type: string
    type: object
  api.Proxy:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      enabled:
        type: boolean
      excluded:
        items:
          type: string
        type: array
      host:
        type: string
      id:
        type: integer
      identity:
        $ref: '#/definitions/api.Ref'
      kind:
        enum:
        - http
        - https
        type: string
      port:
        type: integer
      updateUser:
        type: string
    type: object
  api.Ref:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    type: object
  api.Repository:
    properties:
      branch:
        type: string
      kind:
        type: string
      path:
        type: string
      tag:
        type: string
      url:
        type: string
    type: object
  api.Review:
    properties:
      application:
        $ref: '#/definitions/api.Ref'
      businessCriticality:
        type: integer
      comments:
        type: string
      createTime:
        type: string
      createUser:
        type: string
      effortEstimate:
        type: string
      id:
        type: integer
      proposedAction:
        type: string
      updateUser:
        type: string
      workPriority:
        type: integer
    required:
    - application
    type: object
  api.RuleBundle:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      custom:
        type: boolean
      description:
        type: string
      id:
        type: integer
      identity:
        $ref: '#/definitions/api.Ref'
      image:
        $ref: '#/definitions/api.Ref'
      kind:
        type: string
      name:
        type: string
      repository:
        $ref: '#/definitions/api.Repository'
      rulesets:
        items:
          $ref: '#/definitions/api.RuleSet'
        type: array
      updateUser:
        type: string
    type: object
  api.RuleSet:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      file:
        $ref: '#/definitions/api.Ref'
      id:
        type: integer
      metadata: {}
      name:
        type: string
      updateUser:
        type: string
    type: object
  api.Schema:
    properties:
      paths:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  api.Setting:
    properties:
      key:
        type: string
      value: {}
    type: object
  api.Stakeholder:
    properties:
      businessServices:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      contributes:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      createTime:
        type: string
      createUser:
        type: string
      email:
        type: string
      id:
        type: integer
      jobFunction:
        $ref: '#/definitions/api.Ref'
      migrationWaves:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      name:
        type: string
      owns:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      stakeholderGroups:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
    required:
    - email
    - name
    type: object
  api.StakeholderGroup:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      migrationWaves:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      name:
        type: string
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Stakeholders:
    properties:
      contributors:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      owner:
        $ref: '#/definitions/api.Ref'
    type: object
  api.TTL:
    properties:
      created:
        type: integer
      failed:
        type: integer
      pending:
        type: integer
      postponed:
        type: integer
      running:
        type: integer
      succeeded:
        type: integer
    type: object
  api.Tag:
    properties:
      category:
        $ref: '#/definitions/api.Ref'
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      name:
        type: string
      updateUser:
        type: string
    required:
    - category
    - name
    type: object
  api.TagCategory:
    properties:
      colour:
        type: string
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      name:
        type: string
      rank:
        type: integer
      tags:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
      username:
        type: string
    required:
    - name
    type: object
  api.TagRef:
    properties:
      id:
        type: integer
      name:
        type: string
      source:
        type: string
    required:
    - id
    type: object
  api.Task:
    properties:
      addon:
        type: string
      application:
        $ref: '#/definitions/api.Ref'
      bucket:
        $ref: '#/definitions/api.Ref'
      canceled:
        type: boolean
      createTime:
        type: string
      createUser:
        type: string
      data:
        type: object
      error:
        type: string
      id:
        type: integer
      image:
        type: string
      locator:
        type: string
      name:
        type: string
      pod:
        type: string
      policy:
        type: string
      priority:
        type: integer
      purged:
        type: boolean
      report:
        $ref: '#/definitions/api.TaskReport'
      retries:
        type: integer
      started:
        type: string
      state:
        type: string
      terminated:
        type: string
      ttl:
        $ref: '#/definitions/api.TTL'
      updateUser:
        type: string
      variant:
        type: string
    required:
    - addon
    - data
    type: object
  api.TaskGroup:
    properties:
      addon:
        type: string
      bucket:
        $ref: '#/definitions/api.Ref'
      createTime:
        type: string
      createUser:
        type: string
      data:
        type: object
      id:
        type: integer
      name:
        type: string
      state:
        type: string
      tasks:
        items:
          $ref: '#/definitions/api.Task'
        type: array
      updateUser:
        type: string
    required:
    - data
    type: object
  api.TaskReport:
    properties:
      activity:
        items:
          type: string
        type: array
      completed:
        type: integer
      createTime:
        type: string
      createUser:
        type: string
      error:
        type: string
      id:
        type: integer
      result:
        type: object
      status:
        type: string
      task:
        type: integer
      total:
        type: integer
      updateUser:
        type: string
    type: object
  api.Ticket:
    properties:
      application:
        $ref: '#/definitions/api.Ref'
      createTime:
        type: string
      createUser:
        type: string
      error:
        type: boolean
      fields:
        $ref: '#/definitions/api.Fields'
      id:
        type: integer
      kind:
        type: string
      lastUpdated:
        type: string
      link:
        type: string
      message:
        type: string
      parent:
        type: string
      reference:
        type: string
      status:
        type: string
      tracker:
        $ref: '#/definitions/api.Ref'
      updateUser:
        type: string
    required:
    - application
    - kind
    - parent
    - tracker
    type: object
  api.Tracker:
    properties:
      connected:
        type: boolean
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      identity:
        $ref: '#/definitions/api.Ref'
      insecure:
        type: boolean
      kind:
        enum:
        - jira-cloud
        - jira-server
        - jira-datacenter
        type: string
      lastUpdated:
        type: string
      message:
        type: string
      metadata:
        $ref: '#/definitions/api.Metadata'
      name:
        type: string
      updateUser:
        type: string
      url:
        type: string
    required:
    - identity
    - kind
    - name
    - url
    type: object
info:
  contact: {}
paths:
  /addons:
    get:
      description: List all addons.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Addon'
            type: array
      summary: List all addons.
      tags:
      - addons
  /addons/{name}:
    get:
      description: Get an addon by name.
      parameters:
      - description: Addon name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Addon'
      summary: Get an addon by name.
      tags:
      - addons
  /adoptionplans:
    post:
      description: Graph generates an application dependency graph arranged in topological
        order.
      parameters:
      - description: requested App IDs
        in: path
        name: requestedApps
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DependencyGraph'
      summary: Generate an application dependency graph arranged in topological order.
      tags:
      - adoptionplans
  /applications:
    delete:
      description: Delete applications.
      parameters:
      - description: List of id
        in: body
        name: application
        required: true
        schema:
          items:
            type: integer
          type: array
      responses:
        "204":
          description: No Content
      summary: Delete a applications.
      tags:
      - applications
    get:
      description: List all applications.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Application'
            type: array
      summary: List all applications.
      tags:
      - applications
    post:
      consumes:
      - application/json
      description: Create an application.
      parameters:
      - description: Application data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Application'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Application'
      summary: Create an application.
      tags:
      - applications
  /applications/{id}:
    delete:
      description: Delete an application.
      parameters:
      - description: Application id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an application.
      tags:
      - applications
    get:
      description: Get an application by ID.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Application'
      summary: Get an application by ID.
      tags:
      - applications
    put:
      consumes:
      - application/json
      description: Update an application.
      parameters:
      - description: Application id
        in: path
        name: id
        required: true
        type: integer
      - description: Application data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Application'
      responses:
        "204":
          description: No Content
      summary: Update an application.
      tags:
      - applications
  /applications/{id}/bucket/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - applications
    get:
      description: |-
        Get bucket content by ID and path.
        Returns index.html for directories when Accept=text/html else a tarball.
        ?filter=glob supports directory content filtering.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - applications
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - applications
  /applications/{id}/facts:
    get:
      description: |-
        List facts. Can be filtered by source.
        By default facts from all sources are returned.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Fact source
        in: query
        name: source
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Fact'
            type: array
      summary: List facts.
      tags:
      - applications
    post:
      consumes:
      - application/json
      description: Create a fact.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Fact data
        in: body
        name: fact
        required: true
        schema:
          $ref: '#/definitions/api.Fact'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      summary: Create a fact.
      tags:
      - applications
    put:
      description: Replace all facts from a source.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Source
        in: query
        name: source
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Replace all facts from a source.
      tags:
      - applications
  /applications/{id}/facts/{key}:
    put:
      consumes:
      - application/json
      description: Update (or create) a fact.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Fact key
        in: path
        name: key
        required: true
        type: string
      - description: Fact source
        in: path
        name: source
        required: true
        type: string
      - description: Fact data
        in: body
        name: fact
        required: true
        schema:
          $ref: '#/definitions/api.Fact'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Update (or create) a fact.
      tags:
      - applications
  /applications/{id}/facts/{key}/{source}:
    delete:
      description: Delete a fact.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Fact key
        in: path
        name: key
        required: true
        type: string
      - description: Fact source
        in: path
        name: source
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a fact.
      tags:
      - applications
  /applications/{id}/facts/{name}/{source}:
    get:
      description: Get fact by name.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Fact key
        in: path
        name: key
        required: true
        type: string
      - description: Fact source
        in: path
        name: source
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Fact'
      summary: Get fact by name.
      tags:
      - applications
  /applications/{id}/stakeholders:
    patch:
      description: Update the owner and contributors of an Application.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Application stakeholders
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Stakeholders'
      responses:
        "204":
          description: No Content
      summary: Update the owner and contributors of an Application.
      tags:
      - applications
  /applications/{id}/tags:
    patch:
      consumes:
      - application/json
      description: Replace tag associations.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Source
        in: query
        name: source
        type: string
      - description: Tag references
        in: body
        name: tags
        required: true
        schema:
          items:
            $ref: '#/definitions/api.TagRef'
          type: array
      responses:
        "204":
          description: No Content
      summary: Replace tag associations.
      tags:
      - applications
    post:
      consumes:
      - application/json
      description: Ensure tag is associated with the application.
      parameters:
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/api.Ref'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Ref'
      summary: Add tag association.
      tags:
      - applications
  /applications/{id}/tags/{sid}:
    delete:
      description: Ensure tag is not associated with the application.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag ID
        in: path
        name: sid
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete tag association.
      tags:
      - applications
  /applications/{id}/tags/id:
    get:
      description: List tag references.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Ref'
            type: array
      summary: List tag references.
      tags:
      - applications
  /auth/login:
    post:
      description: Login and obtain a bearer token.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Login'
      summary: Login and obtain a bearer token.
      tags:
      - auth
  /auth/refresh:
    post:
      description: Refresh bearer token.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Login'
      summary: Refresh bearer token.
      tags:
      - auth
  /batch/tags:
    post:
      description: Batch-create Tags.
      parameters:
      - description: Tags data
        in: body
        name: tags
        required: true
        schema:
          items:
            $ref: '#/definitions/api.Tag'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tag'
            type: array
      summary: Batch-create Tags.
      tags:
      - batch
      - tags
  /batch/tickets:
    post:
      description: Batch-create Tickets.
      parameters:
      - description: Tickets data
        in: body
        name: tickets
        required: true
        schema:
          items:
            $ref: '#/definitions/api.Ticket'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Ticket'
            type: array
      summary: Batch-create Tickets.
      tags:
      - batch
      - tickets
  /buckets:
    get:
      description: List all buckets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Bucket'
            type: array
      summary: List all buckets.
      tags:
      - buckets
    post:
      consumes:
      - application/json
      description: Create a bucket.
      parameters:
      - description: Bucket name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Bucket'
      summary: Create a bucket.
      tags:
      - buckets
  /buckets/{id}:
    delete:
      description: Delete a bucket.
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a bucket.
      tags:
      - buckets
    get:
      description: |-
        Get a bucket by ID.
        Returns api.Bucket when Accept=application/json.
        Else returns index.html when Accept=text/html.
        Else returns tarball.
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Bucket'
      summary: Get a bucket by ID.
      tags:
      - buckets
  /buckets/{id}/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - buckets
    get:
      description: |-
        Get bucket content by ID and path.
        When path is FILE, returns file content.
        When path is DIRECTORY and Accept=text/html returns index.html.
        ?filter=glob supports directory content filtering.
        Else returns a tarball.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - buckets
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - buckets
  /businessservices:
    get:
      description: List all business services.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.BusinessService'
      summary: List all business services.
      tags:
      - businessservices
    post:
      consumes:
      - application/json
      description: Create a business service.
      parameters:
      - description: Business service data
        in: body
        name: business_service
        required: true
        schema:
          $ref: '#/definitions/api.BusinessService'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.BusinessService'
      summary: Create a business service.
      tags:
      - businessservices
  /businessservices/{id}:
    delete:
      description: Delete a business service.
      parameters:
      - description: Business service ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a business service.
      tags:
      - businessservices
    get:
      description: Get a business service by ID.
      parameters:
      - description: Business Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.BusinessService'
      summary: Get a business service by ID.
      tags:
      - businessservices
    put:
      consumes:
      - application/json
      description: Update a business service.
      parameters:
      - description: Business service ID
        in: path
        name: id
        required: true
        type: string
      - description: Business service data
        in: body
        name: business_service
        required: true
        schema:
          $ref: '#/definitions/api.BusinessService'
      responses:
        "204":
          description: No Content
      summary: Update a business service.
      tags:
      - businessservices
  /cache:
    delete:
      description: Delete a directory within the cache.
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a directory within the cache.
      tags:
      - cache
  /caches/{id}:
    get:
      description: Get the cache.
      parameters:
      - description: Cache DIR
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Cache'
      summary: Get the cache.
      tags:
      - cache
  /dependencies:
    get:
      description: List all dependencies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Dependency'
            type: array
      summary: List all dependencies.
      tags:
      - dependencies
    post:
      consumes:
      - application/json
      description: Create a dependency.
      parameters:
      - description: Dependency data
        in: body
        name: applications_dependency
        required: true
        schema:
          $ref: '#/definitions/api.Dependency'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Dependency'
      summary: Create a dependency.
      tags:
      - dependencies
  /dependencies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a dependency.
      parameters:
      - description: Dependency id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a dependency.
      tags:
      - dependencies
    get:
      description: Get a dependency by ID.
      parameters:
      - description: Dependency ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Dependency'
      summary: Get a dependency by ID.
      tags:
      - dependencies
  /files:
    get:
      description: List all files.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.File'
            type: array
      summary: List all files.
      tags:
      - file
    post:
      consumes:
      - application/json
      description: Create a file.
      parameters:
      - description: File name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.File'
      summary: Create a file.
      tags:
      - file
  /files/{id}:
    delete:
      description: Delete a file.
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a file.
      tags:
      - file
    get:
      description: Get a file by ID. Returns api.File when Accept=application/json
        else the file content.
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.File'
      summary: Get a file by ID.
      tags:
      - file
  /identities:
    get:
      description: List all identities.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Identity'
            type: array
      summary: List all identities.
      tags:
      - identities
    post:
      consumes:
      - application/json
      description: Create an identity.
      parameters:
      - description: Identity data
        in: body
        name: identity
        required: true
        schema:
          $ref: '#/definitions/api.Identity'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Identity'
      summary: Create an identity.
      tags:
      - identities
  /identities/{id}:
    delete:
      description: Delete an identity.
      parameters:
      - description: Identity ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an identity.
      tags:
      - identities
    get:
      description: Get an identity by ID.
      parameters:
      - description: Identity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Identity'
      summary: Get an identity by ID.
      tags:
      - identities
    put:
      consumes:
      - application/json
      description: Update an identity.
      parameters:
      - description: Identity ID
        in: path
        name: id
        required: true
        type: string
      - description: Identity data
        in: body
        name: identity
        required: true
        schema:
          $ref: '#/definitions/api.Identity'
      responses:
        "204":
          description: No Content
      summary: Update an identity.
      tags:
      - identities
  /imports:
    get:
      description: List imports.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Import'
            type: array
      summary: List imports.
      tags:
      - imports
  /imports/{id}:
    delete:
      description: Delete an import. This leaves any created application or dependency.
      parameters:
      - description: Import ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an import.
      tags:
      - imports
    get:
      description: Get an import by ID.
      parameters:
      - description: Import ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Import'
      summary: Get an import by ID.
      tags:
      - imports
  /importsummaries:
    get:
      description: List import summaries.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.ImportSummary'
            type: array
      summary: List import summaries.
      tags:
      - imports
  /importsummaries/{id}:
    delete:
      description: Delete an import summary and associated import records.
      parameters:
      - description: ImportSummary ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an import summary and associated import records.
      tags:
      - imports
    get:
      description: Get an import by ID.
      parameters:
      - description: ImportSummary ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ImportSummary'
      summary: Get an import summary by ID.
      tags:
      - imports
  /importsummaries/download:
    get:
      description: Export the source CSV for a particular import summary.
      parameters:
      - description: ImportSummary ID
        in: query
        name: importSummary.id
        required: true
        type: string
      produces:
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            type: file
      summary: Export the source CSV for a particular import summary.
      tags:
      - imports
  /importsummaries/upload:
    post:
      description: Upload a CSV containing applications and dependencies to import.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.ImportSummary'
      summary: Upload a CSV containing applications and dependencies to import.
      tags:
      - imports
  /jobfunctions:
    get:
      description: List all job functions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.JobFunction'
            type: array
      summary: List all job functions.
      tags:
      - jobfunctions
    post:
      consumes:
      - application/json
      description: Create a job function.
      parameters:
      - description: Job Function data
        in: body
        name: job_function
        required: true
        schema:
          $ref: '#/definitions/api.JobFunction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.JobFunction'
      summary: Create a job function.
      tags:
      - jobfunctions
  /jobfunctions/{id}:
    delete:
      description: Delete a job function.
      parameters:
      - description: Job Function ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a job function.
      tags:
      - jobfunctions
    get:
      description: Get a job function by ID.
      parameters:
      - description: Job Function ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.JobFunction'
            type: array
      summary: Get a job function by ID.
      tags:
      - jobfunctions
    put:
      consumes:
      - application/json
      description: Update a job function.
      parameters:
      - description: Job Function ID
        in: path
        name: id
        required: true
        type: string
      - description: Job Function data
        in: body
        name: job_function
        required: true
        schema:
          $ref: '#/definitions/api.JobFunction'
      responses:
        "204":
          description: No Content
      summary: Update a job function.
      tags:
      - jobfunctions
  /migrationwaves:
    get:
      description: List all migration waves.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.MigrationWave'
            type: array
      summary: List all migration waves.
      tags:
      - migrationwaves
    post:
      consumes:
      - application/json
      description: Create a migration wave.
      parameters:
      - description: Migration Wave data
        in: body
        name: migrationwave
        required: true
        schema:
          $ref: '#/definitions/api.MigrationWave'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.MigrationWave'
      summary: Create a migration wave.
      tags:
      - migrationwaves
  /migrationwaves/{id}:
    delete:
      description: Delete a migration wave.
      parameters:
      - description: MigrationWave id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a migration wave.
      tags:
      - migrationwaves
    get:
      description: Get a migration wave by ID.
      parameters:
      - description: Migration Wave ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.MigrationWave'
      summary: Get a migration wave by ID.
      tags:
      - migrationwaves
    put:
      consumes:
      - application/json
      description: Update a migration wave.
      parameters:
      - description: MigrationWave id
        in: path
        name: id
        required: true
        type: integer
      - description: MigrationWave data
        in: body
        name: migrationWave
        required: true
        schema:
          $ref: '#/definitions/api.MigrationWave'
      responses:
        "204":
          description: No Content
      summary: Update a migration wave.
      tags:
      - migrationwaves
  /proxies:
    get:
      description: List all proxies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Proxy'
            type: array
      summary: List all proxies.
      tags:
      - proxies
    post:
      consumes:
      - application/json
      description: Create an proxy.
      parameters:
      - description: Proxy data
        in: body
        name: proxy
        required: true
        schema:
          $ref: '#/definitions/api.Proxy'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Proxy'
      summary: Create an proxy.
      tags:
      - proxies
  /proxies/{id}:
    delete:
      description: Delete an proxy.
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an proxy.
      tags:
      - proxies
    get:
      description: Get an proxy by ID.
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Proxy'
      summary: Get an proxy by ID.
      tags:
      - proxies
    put:
      consumes:
      - application/json
      description: Update an proxy.
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: string
      - description: Proxy data
        in: body
        name: proxy
        required: true
        schema:
          $ref: '#/definitions/api.Proxy'
      responses:
        "204":
          description: No Content
      summary: Update an proxy.
      tags:
      - proxies
  /reviews:
    get:
      description: List all reviews.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Review'
            type: array
      summary: List all reviews.
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Create a review.
      parameters:
      - description: Review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/api.Review'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Review'
      summary: Create a review.
      tags:
      - reviews
  /reviews/{id}:
    delete:
      description: Delete a review.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a review.
      tags:
      - reviews
    get:
      description: Get a review by ID.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Review'
            type: array
      summary: Get a review by ID.
      tags:
      - reviews
    put:
      consumes:
      - application/json
      description: Update a review.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      - description: Review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/api.Review'
      responses:
        "204":
          description: No Content
      summary: Update a review.
      tags:
      - reviews
  /reviews/copy:
    post:
      consumes:
      - application/json
      description: Copy a review from one application to others.
      parameters:
      - description: Review copy request data
        in: body
        name: copy_request
        required: true
        schema:
          $ref: '#/definitions/api.CopyRequest'
      responses:
        "204":
          description: No Content
      summary: Copy a review from one application to others.
      tags:
      - reviews
  /rulebundles:
    get:
      description: List all bindings.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.RuleBundle'
            type: array
      summary: List all bindings.
      tags:
      - rulebundles
    post:
      consumes:
      - application/json
      description: Create a bundle.
      parameters:
      - description: RuleBundle data
        in: body
        name: ruleBundle
        required: true
        schema:
          $ref: '#/definitions/api.RuleBundle'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.RuleBundle'
      summary: Create a bundle.
      tags:
      - rulebundles
  /rulebundles/{id}:
    delete:
      description: Delete a bundle.
      parameters:
      - description: RuleBundle ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a bundle.
      tags:
      - rulebundles
    get:
      description: Get a RuleBundle by ID.
      parameters:
      - description: RuleBundle ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RuleBundle'
      summary: Get a RuleBundle by ID.
      tags:
      - rulebundles
    put:
      consumes:
      - application/json
      description: Update a bundle.
      parameters:
      - description: RuleBundle ID
        in: path
        name: id
        required: true
        type: string
      - description: RuleBundle data
        in: body
        name: ruleBundle
        required: true
        schema:
          $ref: '#/definitions/api.RuleBundle'
      responses:
        "204":
          description: No Content
      summary: Update a bundle.
      tags:
      - rulebundles
  /schema:
    get:
      description: Get the API schema.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Schema'
      summary: Get the API schema.
      tags:
      - schema
  /settings:
    get:
      description: List all settings.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Setting'
            type: array
      summary: List all settings.
      tags:
      - settings
    post:
      consumes:
      - application/json
      description: Create a setting.
      parameters:
      - description: Setting data
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/api.Setting'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Setting'
      summary: Create a setting.
      tags:
      - settings
  /settings/{key}:
    delete:
      description: Delete a setting.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a setting.
      tags:
      - settings
    get:
      description: Get a setting by its key.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Setting'
      summary: Get a setting by its key.
      tags:
      - settings
    post:
      consumes:
      - application/json
      description: Create a setting.
      parameters:
      - description: Setting value
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/api.Setting'
      responses:
        "201":
          description: Created
      summary: Create a setting.
      tags:
      - settings
    put:
      consumes:
      - application/json
      description: Update a setting.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Update a setting.
      tags:
      - settings
  /stakeholdergroups:
    get:
      description: List all stakeholder groups.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.StakeholderGroup'
            type: array
      summary: List all stakeholder groups.
      tags:
      - stakeholdergroups
    post:
      consumes:
      - application/json
      description: Create a stakeholder group.
      parameters:
      - description: Stakeholder Group data
        in: body
        name: stakeholder_group
        required: true
        schema:
          $ref: '#/definitions/api.StakeholderGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.StakeholderGroup'
      summary: Create a stakeholder group.
      tags:
      - stakeholdergroups
  /stakeholdergroups/{id}:
    delete:
      description: Delete a stakeholder group.
      parameters:
      - description: Stakeholder Group ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a stakeholder group.
      tags:
      - stakeholdergroups
    get:
      description: Get a stakeholder group by ID.
      parameters:
      - description: Stakeholder Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.StakeholderGroup'
      summary: Get a stakeholder group by ID.
      tags:
      - stakeholdergroups
    put:
      consumes:
      - application/json
      description: Update a stakeholder group.
      parameters:
      - description: Stakeholder Group ID
        in: path
        name: id
        required: true
        type: string
      - description: Stakeholder Group data
        in: body
        name: stakeholder_group
        required: true
        schema:
          $ref: '#/definitions/api.StakeholderGroup'
      responses:
        "204":
          description: No Content
      summary: Update a stakeholder group.
      tags:
      - stakeholdergroups
  /stakeholders:
    get:
      description: List all stakeholders.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Stakeholder'
            type: array
      summary: List all stakeholders.
      tags:
      - stakeholders
    post:
      consumes:
      - application/json
      description: Create a stakeholder.
      parameters:
      - description: Stakeholder data
        in: body
        name: stakeholder
        required: true
        schema:
          $ref: '#/definitions/api.Stakeholder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Stakeholder'
      summary: Create a stakeholder.
      tags:
      - stakeholders
  /stakeholders/{id}:
    delete:
      description: Delete a stakeholder.
      parameters:
      - description: Stakeholder ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a stakeholder.
      tags:
      - stakeholders
    get:
      description: Get a stakeholder by ID.
      parameters:
      - description: Stakeholder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Stakeholder'
      summary: Get a stakeholder by ID.
      tags:
      - stakeholders
    put:
      consumes:
      - application/json
      description: Update a stakeholder.
      parameters:
      - description: Stakeholder ID
        in: path
        name: id
        required: true
        type: string
      - description: Stakeholder data
        in: body
        name: stakeholder
        required: true
        schema:
          $ref: '#/definitions/api.Stakeholder'
      responses:
        "204":
          description: No Content
      summary: Update a stakeholder.
      tags:
      - stakeholders
  /tagcategories:
    get:
      description: List all tag categories.
      parameters:
      - description: Optional category name filter
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TagCategory'
            type: array
      summary: List all tag categories.
      tags:
      - tagcategories
    post:
      consumes:
      - application/json
      description: Create a tag category.
      parameters:
      - description: Tag Category data
        in: body
        name: tag_type
        required: true
        schema:
          $ref: '#/definitions/api.TagCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.TagCategory'
      summary: Create a tag category.
      tags:
      - tagcategories
  /tagcategories/{id}:
    delete:
      description: Delete a tag category.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a tag category.
      tags:
      - tagcategories
    get:
      description: Get a tag category by ID.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TagCategory'
      summary: Get a tag category by ID.
      tags:
      - tagcategories
    put:
      consumes:
      - application/json
      description: Update a tag category.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag Category data
        in: body
        name: tag_type
        required: true
        schema:
          $ref: '#/definitions/api.TagCategory'
      responses:
        "204":
          description: No Content
      summary: Update a tag category.
      tags:
      - tagcategories
  /tagcategories/{id}/tags:
    get:
      description: List the tags in the tag category.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Optional tag name filter
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tag'
            type: array
      summary: List the tags in the tag category.
      tags:
      - tagcategories
  /tags:
    get:
      description: List all tags.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tag'
            type: array
      summary: List all tags.
      tags:
      - tags
    post:
      consumes:
      - application/json
      description: Create a tag.
      parameters:
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/api.Tag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Tag'
      summary: Create a tag.
      tags:
      - tags
  /tags/{id}:
    delete:
      description: Delete a tag.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a tag.
      tags:
      - tags
    get:
      description: Get a tag by ID.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Tag'
      summary: Get a tag by ID.
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Update a tag.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/api.Tag'
      responses:
        "204":
          description: No Content
      summary: Update a tag.
      tags:
      - tags
  /taskgroups:
    get:
      description: List all task groups.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TaskGroup'
            type: array
      summary: List all task groups.
      tags:
      - taskgroups
    post:
      consumes:
      - application/json
      description: Create a task group.
      parameters:
      - description: TaskGroup data
        in: body
        name: taskgroup
        required: true
        schema:
          $ref: '#/definitions/api.TaskGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.TaskGroup'
      summary: Create a task group.
      tags:
      - taskgroups
  /taskgroups/{id}:
    delete:
      description: Delete a task group.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a task group.
      tags:
      - taskgroups
    get:
      description: Get a task group by ID.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TaskGroup'
      summary: Get a task group by ID.
      tags:
      - taskgroups
    put:
      consumes:
      - application/json
      description: Update a task group.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.TaskGroup'
      responses:
        "204":
          description: No Content
      summary: Update a task group.
      tags:
      - taskgroups
  /taskgroups/{id}/bucket/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - taskgroups
    get:
      description: |-
        Get bucket content by ID and path.
        Returns index.html for directories when Accept=text/html else a tarball.
        ?filter=glob supports directory content filtering.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - taskgroups
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - taskgroups
  /taskgroups/{id}/submit:
    put:
      consumes:
      - application/json
      description: Submit a task group.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: string
      - description: TaskGroup data (optional)
        in: body
        name: taskgroup
        schema:
          $ref: '#/definitions/api.TaskGroup'
      responses:
        "204":
          description: No Content
      summary: Submit a task group.
      tags:
      - taskgroups
  /tasks:
    get:
      description: List all tasks.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Task'
            type: array
      summary: List all tasks.
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a task.
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Task'
      summary: Create a task.
      tags:
      - tasks
  /tasks/{id}:
    delete:
      description: Delete a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a task.
      tags:
      - tasks
    get:
      description: Get a task by ID.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Task'
      summary: Get a task by ID.
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.Task'
      responses:
        "204":
          description: No Content
      summary: Update a task.
      tags:
      - tasks
  /tasks/{id}/bucket/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - tasks
    get:
      description: |-
        Get bucket content by ID and path.
        Returns index.html for directories when Accept=text/html else a tarball.
        ?filter=glob supports directory content filtering.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - tasks
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - tasks
  /tasks/{id}/cancel:
    put:
      description: Cancel a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Cancel a task.
      tags:
      - tasks
  /tasks/{id}/report:
    delete:
      consumes:
      - application/json
      description: Delete a task report.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a task report.
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Update a task report.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: TaskReport data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.TaskReport'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.TaskReport'
      summary: Create a task report.
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task report.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: TaskReport data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.TaskReport'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TaskReport'
      summary: Update a task report.
      tags:
      - tasks
  /tasks/{id}/submit:
    put:
      consumes:
      - application/json
      description: Submit a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task data (optional)
        in: body
        name: task
        schema:
          $ref: '#/definitions/api.Task'
      responses:
        "204":
          description: No Content
      summary: Submit a task.
      tags:
      - tasks
  /tickets:
    get:
      description: List all tickets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Ticket'
            type: array
      summary: List all tickets.
      tags:
      - tickets
    post:
      consumes:
      - application/json
      description: Create a ticket.
      parameters:
      - description: Ticket data
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/api.Ticket'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Ticket'
      summary: Create a ticket.
      tags:
      - tickets
  /tickets/{id}:
    delete:
      description: Delete a ticket.
      parameters:
      - description: Ticket id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a ticket.
      tags:
      - tickets
    get:
      description: Get a ticket by ID.
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Ticket'
      summary: Get a ticket by ID.
      tags:
      - tickets
  /trackers:
    get:
      description: List all trackers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tracker'
            type: array
      summary: List all trackers.
      tags:
      - trackers
    post:
      consumes:
      - application/json
      description: Create a tracker.
      parameters:
      - description: Tracker data
        in: body
        name: tracker
        required: true
        schema:
          $ref: '#/definitions/api.Tracker'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Tracker'
      summary: Create a tracker.
      tags:
      - trackers
  /trackers/{id}:
    delete:
      description: Delete a tracker.
      parameters:
      - description: Tracker id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a tracker.
      tags:
      - trackers
    get:
      description: Get a tracker by ID.
      parameters:
      - description: Tracker ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Tracker'
      summary: Get a tracker by ID.
      tags:
      - trackers
    put:
      consumes:
      - application/json
      description: Update a tracker.
      parameters:
      - description: Tracker id
        in: path
        name: id
        required: true
        type: integer
      - description: Tracker data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Tracker'
      responses:
        "204":
          description: No Content
      summary: Update a tracker.
      tags:
      - trackers
swagger: "2.0"
