consumes:
- application/json
definitions:
  api.Addon:
    properties:
      container:
        $ref: '#/definitions/v1.Container'
      extensions:
        items:
          $ref: '#/definitions/api.Extension'
        type: array
      metadata: {}
      name:
        type: string
    type: object
  api.Analysis:
    properties:
      application:
        $ref: '#/definitions/api.Ref'
      archived:
        type: boolean
      commit:
        type: string
      createTime:
        type: string
      createUser:
        type: string
      dependencies:
        items:
          $ref: '#/definitions/api.TechDependency'
        type: array
      effort:
        type: integer
      id:
        type: integer
      issues:
        items:
          $ref: '#/definitions/api.Issue'
        type: array
      summary:
        type: object
      updateUser:
        type: string
    type: object
  api.Application:
    properties:
      archetypes:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      assessed:
        type: boolean
      assessments:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      binary:
        type: string
      bucket:
        $ref: '#/definitions/api.Ref'
      businessService:
        $ref: '#/definitions/api.Ref'
      comments:
        type: string
      confidence:
        type: integer
      contributors:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      effort:
        type: integer
      id:
        type: integer
      identities:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      migrationWave:
        $ref: '#/definitions/api.Ref'
      name:
        type: string
      owner:
        $ref: '#/definitions/api.Ref'
      repository:
        $ref: '#/definitions/api.Repository'
      review:
        $ref: '#/definitions/api.Ref'
      risk:
        type: string
      tags:
        items:
          $ref: '#/definitions/api.TagRef'
        type: array
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Archetype:
    properties:
      applications:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      assessed:
        type: boolean
      assessments:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      comments:
        type: string
      confidence:
        type: integer
      createTime:
        type: string
      createUser:
        type: string
      criteria:
        items:
          $ref: '#/definitions/api.TagRef'
        type: array
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      review:
        $ref: '#/definitions/api.Ref'
      risk:
        type: string
      stakeholderGroups:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      tags:
        items:
          $ref: '#/definitions/api.TagRef'
        type: array
      updateUser:
        type: string
    type: object
  api.Assessment:
    properties:
      application:
        $ref: '#/definitions/api.Ref'
      archetype:
        $ref: '#/definitions/api.Ref'
      confidence:
        type: integer
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      questionnaire:
        $ref: '#/definitions/api.Ref'
      required:
        type: boolean
      risk:
        description: read only
        type: string
      riskMessages:
        $ref: '#/definitions/assessment.RiskMessages'
      sections:
        items:
          $ref: '#/definitions/assessment.Section'
        type: array
      stakeholderGroups:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      status:
        type: string
      thresholds:
        $ref: '#/definitions/assessment.Thresholds'
      updateUser:
        type: string
    required:
    - questionnaire
    type: object
  api.Attachment:
    properties:
      activity:
        type: integer
      id:
        type: integer
      name:
        type: string
    required:
    - id
    type: object
  api.Bucket:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      expiration:
        type: string
      id:
        type: integer
      path:
        type: string
      updateUser:
        type: string
    type: object
  api.BusinessService:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      owner:
        $ref: '#/definitions/api.Ref'
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Cache:
    properties:
      capacity:
        type: string
      exists:
        type: boolean
      path:
        type: string
      used:
        type: string
    type: object
  api.CopyRequest:
    properties:
      sourceReview:
        type: integer
      targetApplications:
        items:
          type: integer
        type: array
    required:
    - sourceReview
    - targetApplications
    type: object
  api.DepAppReport:
    properties:
      businessService:
        type: string
      dependency:
        properties:
          id:
            type: integer
          indirect:
            type: boolean
          labels:
            items:
              type: string
            type: array
          name:
            type: string
          provider:
            type: string
          sha:
            type: string
          version:
            type: string
        type: object
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  api.Dependency:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      from:
        $ref: '#/definitions/api.Ref'
      id:
        type: integer
      to:
        $ref: '#/definitions/api.Ref'
      updateUser:
        type: string
    type: object
  api.Extension:
    properties:
      addon:
        type: string
      capabilities:
        items:
          type: string
        type: array
      container:
        $ref: '#/definitions/v1.Container'
      metadata: {}
      name:
        type: string
    type: object
  api.Fact:
    properties:
      key:
        type: string
      source:
        type: string
      value: {}
    type: object
  api.FactMap:
    additionalProperties: {}
    type: object
  api.Fields:
    additionalProperties: {}
    type: object
  api.File:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      expiration:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        type: string
      updateUser:
        type: string
    type: object
  api.FileReport:
    properties:
      effort:
        type: integer
      file:
        type: string
      incidents:
        type: integer
      issueId:
        type: integer
    type: object
  api.Identity:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      key:
        type: string
      kind:
        type: string
      name:
        type: string
      password:
        type: string
      settings:
        type: string
      updateUser:
        type: string
      user:
        type: string
    required:
    - kind
    - name
    type: object
  api.Import:
    additionalProperties: {}
    type: object
  api.ImportSummary:
    properties:
      createEntities:
        type: boolean
      createTime:
        type: string
      createUser:
        type: string
      filename:
        type: string
      id:
        type: integer
      importStatus:
        type: string
      importTime:
        type: string
      invalidCount:
        type: integer
      updateUser:
        type: string
      validCount:
        type: integer
    type: object
  api.Incident:
    properties:
      codeSnip:
        type: string
      createTime:
        type: string
      createUser:
        type: string
      facts:
        $ref: '#/definitions/api.FactMap'
      file:
        type: string
      id:
        type: integer
      issue:
        type: integer
      line:
        type: integer
      message:
        type: string
      updateUser:
        type: string
    type: object
  api.Issue:
    properties:
      analysis:
        type: integer
      category:
        type: string
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      effort:
        type: integer
      facts:
        $ref: '#/definitions/api.FactMap'
      id:
        type: integer
      incidents:
        items:
          $ref: '#/definitions/api.Incident'
        type: array
      labels:
        items:
          type: string
        type: array
      links:
        items:
          $ref: '#/definitions/api.Link'
        type: array
      name:
        type: string
      rule:
        type: string
      ruleset:
        type: string
      updateUser:
        type: string
    required:
    - category
    - name
    - rule
    - ruleset
    type: object
  api.IssueAppReport:
    properties:
      businessService:
        type: string
      description:
        type: string
      effort:
        type: integer
      files:
        type: integer
      id:
        type: integer
      incidents:
        type: integer
      issue:
        properties:
          description:
            type: string
          id:
            type: integer
          name:
            type: string
          rule:
            type: string
          ruleset:
            type: string
        type: object
      name:
        type: string
    type: object
  api.IssueReport:
    properties:
      category:
        type: string
      description:
        type: string
      effort:
        type: integer
      files:
        type: integer
      id:
        type: integer
      labels:
        items:
          type: string
        type: array
      links:
        items:
          $ref: '#/definitions/api.Link'
        type: array
      name:
        type: string
      rule:
        type: string
      ruleset:
        type: string
    type: object
  api.IssueType:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  api.JobFunction:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      name:
        type: string
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Label:
    properties:
      label:
        type: string
      name:
        type: string
    type: object
  api.Link:
    properties:
      title:
        type: string
      url:
        type: string
    type: object
  api.Login:
    properties:
      expiry:
        type: integer
      password:
        type: string
      refresh:
        type: string
      token:
        type: string
      user:
        type: string
    type: object
  api.MigrationWave:
    properties:
      applications:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      createTime:
        type: string
      createUser:
        type: string
      endDate:
        type: string
      id:
        type: integer
      name:
        type: string
      stakeholderGroups:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      startDate:
        type: string
      updateUser:
        type: string
    required:
    - endDate
    - startDate
    type: object
  api.Project:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  api.Proxy:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      enabled:
        type: boolean
      excluded:
        items:
          type: string
        type: array
      host:
        type: string
      id:
        type: integer
      identity:
        $ref: '#/definitions/api.Ref'
      kind:
        enum:
        - http
        - https
        type: string
      port:
        type: integer
      updateUser:
        type: string
    type: object
  api.Questionnaire:
    properties:
      builtin:
        type: boolean
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      required:
        type: boolean
      riskMessages:
        $ref: '#/definitions/assessment.RiskMessages'
      sections:
        items:
          $ref: '#/definitions/assessment.Section'
        minItems: 1
        type: array
      thresholds:
        $ref: '#/definitions/assessment.Thresholds'
      updateUser:
        type: string
    required:
    - name
    - riskMessages
    - sections
    - thresholds
    type: object
  api.Ref:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    type: object
  api.Repository:
    properties:
      branch:
        type: string
      kind:
        type: string
      path:
        type: string
      tag:
        type: string
      url:
        type: string
    type: object
  api.Review:
    properties:
      application:
        $ref: '#/definitions/api.Ref'
      archetype:
        $ref: '#/definitions/api.Ref'
      businessCriticality:
        type: integer
      comments:
        type: string
      createTime:
        type: string
      createUser:
        type: string
      effortEstimate:
        type: string
      id:
        type: integer
      proposedAction:
        type: string
      updateUser:
        type: string
      workPriority:
        type: integer
    type: object
  api.Rule:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      file:
        $ref: '#/definitions/api.Ref'
      id:
        type: integer
      labels:
        items:
          type: string
        type: array
      name:
        type: string
      updateUser:
        type: string
    type: object
  api.RuleReport:
    properties:
      applications:
        type: integer
      category:
        type: string
      description:
        type: string
      effort:
        type: integer
      labels:
        items:
          type: string
        type: array
      links:
        items:
          $ref: '#/definitions/api.Link'
        type: array
      name:
        type: string
      rule:
        type: string
      ruleset:
        type: string
    type: object
  api.RuleSet:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      dependsOn:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      description:
        type: string
      id:
        type: integer
      identity:
        $ref: '#/definitions/api.Ref'
      kind:
        type: string
      name:
        type: string
      repository:
        $ref: '#/definitions/api.Repository'
      rules:
        items:
          $ref: '#/definitions/api.Rule'
        type: array
      updateUser:
        type: string
    type: object
  api.Schema:
    properties:
      paths:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  api.Setting:
    properties:
      key:
        type: string
      value: {}
    type: object
  api.Stakeholder:
    properties:
      businessServices:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      contributes:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      createTime:
        type: string
      createUser:
        type: string
      email:
        type: string
      id:
        type: integer
      jobFunction:
        $ref: '#/definitions/api.Ref'
      migrationWaves:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      name:
        type: string
      owns:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      stakeholderGroups:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
    required:
    - email
    - name
    type: object
  api.StakeholderGroup:
    properties:
      createTime:
        type: string
      createUser:
        type: string
      description:
        type: string
      id:
        type: integer
      migrationWaves:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      name:
        type: string
      stakeholders:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
    required:
    - name
    type: object
  api.Stakeholders:
    properties:
      contributors:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      owner:
        $ref: '#/definitions/api.Ref'
    type: object
  api.TTL:
    properties:
      created:
        type: integer
      failed:
        type: integer
      pending:
        type: integer
      running:
        type: integer
      succeeded:
        type: integer
    type: object
  api.Tag:
    properties:
      category:
        $ref: '#/definitions/api.Ref'
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      name:
        type: string
      updateUser:
        type: string
    required:
    - category
    - name
    type: object
  api.TagCategory:
    properties:
      colour:
        type: string
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      name:
        type: string
      rank:
        type: integer
      tags:
        items:
          $ref: '#/definitions/api.Ref'
        type: array
      updateUser:
        type: string
      username:
        type: string
    required:
    - name
    type: object
  api.TagRef:
    properties:
      id:
        type: integer
      name:
        type: string
      source:
        type: string
      virtual:
        type: boolean
    required:
    - id
    type: object
  api.Target:
    properties:
      choice:
        type: boolean
      createTime:
        type: string
      createUser:
        type: string
      custom:
        type: boolean
      description:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/api.Ref'
      labels:
        items:
          $ref: '#/definitions/api.Label'
        type: array
      name:
        type: string
      provider:
        type: string
      ruleset:
        $ref: '#/definitions/api.RuleSet'
      updateUser:
        type: string
    type: object
  api.Task:
    properties:
      activity:
        items:
          type: string
        type: array
      addon:
        type: string
      application:
        $ref: '#/definitions/api.Ref'
      attached:
        items:
          $ref: '#/definitions/api.Attachment'
        type: array
      bucket:
        $ref: '#/definitions/api.Ref'
      createTime:
        type: string
      createUser:
        type: string
      data: {}
      errors:
        items:
          $ref: '#/definitions/api.TaskError'
        type: array
      events:
        items:
          $ref: '#/definitions/api.TaskEvent'
        type: array
      extensions:
        items:
          type: string
        type: array
      id:
        type: integer
      kind:
        type: string
      locator:
        type: string
      name:
        type: string
      pod:
        type: string
      policy:
        $ref: '#/definitions/api.TaskPolicy'
      priority:
        type: integer
      retries:
        type: integer
      started:
        type: string
      state:
        type: string
      terminated:
        type: string
      ttl:
        $ref: '#/definitions/api.TTL'
      updateUser:
        type: string
    type: object
  api.TaskError:
    properties:
      description:
        type: string
      severity:
        type: string
    type: object
  api.TaskEvent:
    properties:
      count:
        type: integer
      kind:
        type: string
      last:
        type: string
      reason:
        type: string
    type: object
  api.TaskGroup:
    properties:
      addon:
        type: string
      bucket:
        $ref: '#/definitions/api.Ref'
      createTime:
        type: string
      createUser:
        type: string
      data:
        type: object
      extensions:
        items:
          type: string
        type: array
      id:
        type: integer
      kind:
        type: string
      name:
        type: string
      policy:
        $ref: '#/definitions/api.TaskPolicy'
      priority:
        type: integer
      state:
        type: string
      tasks:
        items:
          $ref: '#/definitions/api.Task'
        type: array
      updateUser:
        type: string
    required:
    - data
    type: object
  api.TaskPolicy:
    properties:
      isolated:
        type: boolean
      preemptEnabled:
        type: boolean
      preemptExempt:
        type: boolean
    type: object
  api.TaskQueue:
    properties:
      pending:
        type: integer
      postponed:
        type: integer
      ready:
        type: integer
      running:
        type: integer
      total:
        type: integer
    type: object
  api.TaskReport:
    properties:
      activity:
        items:
          type: string
        type: array
      attached:
        items:
          $ref: '#/definitions/api.Attachment'
        type: array
      completed:
        type: integer
      createTime:
        type: string
      createUser:
        type: string
      errors:
        items:
          $ref: '#/definitions/api.TaskError'
        type: array
      id:
        type: integer
      result: {}
      status:
        type: string
      task:
        type: integer
      total:
        type: integer
      updateUser:
        type: string
    type: object
  api.TechDependency:
    properties:
      analysis:
        type: integer
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      indirect:
        type: boolean
      labels:
        items:
          type: string
        type: array
      name:
        type: string
      provider:
        type: string
      sha:
        type: string
      updateUser:
        type: string
      version:
        type: string
    required:
    - name
    type: object
  api.Ticket:
    properties:
      application:
        $ref: '#/definitions/api.Ref'
      createTime:
        type: string
      createUser:
        type: string
      error:
        type: boolean
      fields:
        $ref: '#/definitions/api.Fields'
      id:
        type: integer
      kind:
        type: string
      lastUpdated:
        type: string
      link:
        type: string
      message:
        type: string
      parent:
        type: string
      reference:
        type: string
      status:
        type: string
      tracker:
        $ref: '#/definitions/api.Ref'
      updateUser:
        type: string
    required:
    - application
    - kind
    - parent
    - tracker
    type: object
  api.Tracker:
    properties:
      connected:
        type: boolean
      createTime:
        type: string
      createUser:
        type: string
      id:
        type: integer
      identity:
        $ref: '#/definitions/api.Ref'
      insecure:
        type: boolean
      kind:
        enum:
        - jira-cloud
        - jira-onprem
        type: string
      lastUpdated:
        type: string
      message:
        type: string
      name:
        type: string
      updateUser:
        type: string
      url:
        type: string
    required:
    - identity
    - kind
    - name
    - url
    type: object
  api.Vertex:
    properties:
      applicationId:
        type: integer
      applicationName:
        type: string
      decision:
        type: string
      effort:
        type: integer
      effortEstimate:
        type: string
      positionX:
        type: integer
      positionY:
        type: integer
    type: object
  assessment.Answer:
    properties:
      applyTags:
        items:
          $ref: '#/definitions/assessment.CategorizedTag'
        type: array
      autoAnswerFor:
        items:
          $ref: '#/definitions/assessment.CategorizedTag'
        type: array
      autoAnswered:
        type: boolean
      mitigation:
        type: string
      order:
        type: integer
      rationale:
        type: string
      risk:
        enum:
        - red
        - yellow
        - green
        - unknown
        type: string
      selected:
        type: boolean
      text:
        type: string
    required:
    - order
    type: object
  assessment.CategorizedTag:
    properties:
      category:
        type: string
      tag:
        type: string
    type: object
  assessment.Question:
    properties:
      answers:
        items:
          $ref: '#/definitions/assessment.Answer'
        minItems: 1
        type: array
      excludeFor:
        items:
          $ref: '#/definitions/assessment.CategorizedTag'
        type: array
      explanation:
        type: string
      includeFor:
        items:
          $ref: '#/definitions/assessment.CategorizedTag'
        type: array
      order:
        type: integer
      text:
        type: string
    required:
    - order
    type: object
  assessment.RiskMessages:
    properties:
      green:
        type: string
      red:
        type: string
      unknown:
        type: string
      yellow:
        type: string
    type: object
  assessment.Section:
    properties:
      comment:
        type: string
      name:
        type: string
      order:
        type: integer
      questions:
        items:
          $ref: '#/definitions/assessment.Question'
        minItems: 1
        type: array
    required:
    - order
    type: object
  assessment.Thresholds:
    properties:
      red:
        type: integer
      unknown:
        type: integer
      yellow:
        type: integer
    type: object
  intstr.IntOrString:
    properties:
      intVal:
        type: integer
      strVal:
        type: string
      type:
        $ref: '#/definitions/intstr.Type'
    type: object
  intstr.Type:
    enum:
    - 0
    - 1
    type: integer
    x-enum-comments:
      Int: The IntOrString holds an int.
      String: The IntOrString holds a string.
    x-enum-varnames:
    - Int
    - String
  resource.Quantity:
    properties:
      Format:
        enum:
        - DecimalExponent
        - BinarySI
        - DecimalSI
        type: string
        x-enum-comments:
          BinarySI: e.g., 12Mi (12 * 2^20)
          DecimalExponent: e.g., 12e6
          DecimalSI: e.g., 12M  (12 * 10^6)
        x-enum-varnames:
        - DecimalExponent
        - BinarySI
        - DecimalSI
    type: object
  v1.Capabilities:
    properties:
      add:
        description: |-
          Added capabilities
          +optional
        items:
          type: string
        type: array
      drop:
        description: |-
          Removed capabilities
          +optional
        items:
          type: string
        type: array
    type: object
  v1.ConfigMapEnvSource:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap must be defined
          +optional
        type: boolean
    type: object
  v1.ConfigMapKeySelector:
    properties:
      key:
        description: The key to select.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its key must be defined
          +optional
        type: boolean
    type: object
  v1.Container:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The container image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The container image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/v1.EnvFromSource'
        type: array
      image:
        description: |-
          Container image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        allOf:
        - $ref: '#/definitions/v1.PullPolicy'
        description: |-
          Image pull policy.
          One of Always, Never, IfNotPresent.
          Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          +optional
      lifecycle:
        allOf:
        - $ref: '#/definitions/v1.Lifecycle'
        description: |-
          Actions that the management system should take in response to container lifecycle events.
          Cannot be updated.
          +optional
      livenessProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          Periodic probe of container liveness.
          Container will be restarted if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Modifying this array with strategic merge patch may corrupt the data.
          For more information See https://github.com/kubernetes/kubernetes/issues/108255.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/v1.ContainerPort'
        type: array
      readinessProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          Periodic probe of container service readiness.
          Container will be removed from service endpoints if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      resources:
        allOf:
        - $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          Compute Resources required by this container.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      securityContext:
        allOf:
        - $ref: '#/definitions/v1.SecurityContext'
        description: |-
          SecurityContext defines the security options the container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
          +optional
      startupProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          StartupProbe indicates that the Pod has successfully initialized.
          If specified, no other probes are executed until this completes successfully.
          If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
          This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
          when it might take a long time to load data or warm a cache, than during steady-state operation.
          This cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        allOf:
        - $ref: '#/definitions/v1.TerminationMessagePolicy'
        description: |-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and failure.
          FallbackToLogsOnError will use the last chunk of container log output if the termination
          message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Defaults to File.
          Cannot be updated.
          +optional
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/v1.VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  v1.ContainerPort:
    properties:
      containerPort:
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
        type: integer
      hostIP:
        description: |-
          What host IP to bind the external port to.
          +optional
        type: string
      hostPort:
        description: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
        type: integer
      name:
        description: |-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
          +optional
        type: string
      protocol:
        allOf:
        - $ref: '#/definitions/v1.Protocol'
        description: |-
          Protocol for port. Must be UDP, TCP, or SCTP.
          Defaults to "TCP".
          +optional
          +default="TCP"
    type: object
  v1.EnvFromSource:
    properties:
      configMapRef:
        allOf:
        - $ref: '#/definitions/v1.ConfigMapEnvSource'
        description: |-
          The ConfigMap to select from
          +optional
      prefix:
        description: |-
          An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          +optional
        type: string
      secretRef:
        allOf:
        - $ref: '#/definitions/v1.SecretEnvSource'
        description: |-
          The Secret to select from
          +optional
    type: object
  v1.EnvVar:
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: |-
          Variable references $(VAR_NAME) are expanded
          using the previously defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
          "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
          Escaped references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
        type: string
      valueFrom:
        allOf:
        - $ref: '#/definitions/v1.EnvVarSource'
        description: |-
          Source for the environment variable's value. Cannot be used if value is not empty.
          +optional
    type: object
  v1.EnvVarSource:
    properties:
      configMapKeyRef:
        allOf:
        - $ref: '#/definitions/v1.ConfigMapKeySelector'
        description: |-
          Selects a key of a ConfigMap.
          +optional
      fieldRef:
        allOf:
        - $ref: '#/definitions/v1.ObjectFieldSelector'
        description: |-
          Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
          spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
          +optional
      resourceFieldRef:
        allOf:
        - $ref: '#/definitions/v1.ResourceFieldSelector'
        description: |-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
          +optional
      secretKeyRef:
        allOf:
        - $ref: '#/definitions/v1.SecretKeySelector'
        description: |-
          Selects a key of a secret in the pod's namespace
          +optional
    type: object
  v1.ExecAction:
    properties:
      command:
        description: |-
          Command is the command line to execute inside the container, the working directory for the
          command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
          not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.GRPCAction:
    properties:
      port:
        description: Port number of the gRPC service. Number must be in the range
          1 to 65535.
        type: integer
      service:
        description: |-
          Service is the name of the service to place in the gRPC HealthCheckRequest
          (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

          If this is not specified, the default behavior is defined by gRPC.
          +optional
          +default=""
        type: string
    type: object
  v1.HTTPGetAction:
    properties:
      host:
        description: |-
          Host name to connect to, defaults to the pod IP. You probably want to set
          "Host" in httpHeaders instead.
          +optional
        type: string
      httpHeaders:
        description: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
        items:
          $ref: '#/definitions/v1.HTTPHeader'
        type: array
      path:
        description: |-
          Path to access on the HTTP server.
          +optional
        type: string
      port:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          Name or number of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
      scheme:
        allOf:
        - $ref: '#/definitions/v1.URIScheme'
        description: |-
          Scheme to use for connecting to the host.
          Defaults to HTTP.
          +optional
    type: object
  v1.HTTPHeader:
    properties:
      name:
        description: The header field name
        type: string
      value:
        description: The header field value
        type: string
    type: object
  v1.Lifecycle:
    properties:
      postStart:
        allOf:
        - $ref: '#/definitions/v1.LifecycleHandler'
        description: |-
          PostStart is called immediately after a container is created. If the handler fails,
          the container is terminated and restarted according to its restart policy.
          Other management of the container blocks until the hook completes.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
      preStop:
        allOf:
        - $ref: '#/definitions/v1.LifecycleHandler'
        description: |-
          PreStop is called immediately before a container is terminated due to an
          API request or management event such as liveness/startup probe failure,
          preemption, resource contention, etc. The handler is not called if the
          container crashes or exits. The Pod's termination grace period countdown begins before the
          PreStop hook is executed. Regardless of the outcome of the handler, the
          container will eventually terminate within the Pod's termination grace
          period (unless delayed by finalizers). Other management of the container blocks until the hook completes
          or until the termination grace period is reached.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
    type: object
  v1.LifecycleHandler:
    properties:
      exec:
        allOf:
        - $ref: '#/definitions/v1.ExecAction'
        description: |-
          Exec specifies the action to take.
          +optional
      httpGet:
        allOf:
        - $ref: '#/definitions/v1.HTTPGetAction'
        description: |-
          HTTPGet specifies the http request to perform.
          +optional
      tcpSocket:
        allOf:
        - $ref: '#/definitions/v1.TCPSocketAction'
        description: |-
          Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
          for the backward compatibility. There are no validation of this field and
          lifecycle hooks will fail in runtime when tcp handler is specified.
          +optional
    type: object
  v1.MountPropagationMode:
    enum:
    - None
    - HostToContainer
    - Bidirectional
    type: string
    x-enum-varnames:
    - MountPropagationNone
    - MountPropagationHostToContainer
    - MountPropagationBidirectional
  v1.ObjectFieldSelector:
    properties:
      apiVersion:
        description: |-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
          +optional
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
    type: object
  v1.Probe:
    properties:
      exec:
        allOf:
        - $ref: '#/definitions/v1.ExecAction'
        description: |-
          Exec specifies the action to take.
          +optional
      failureThreshold:
        description: |-
          Minimum consecutive failures for the probe to be considered failed after having succeeded.
          Defaults to 3. Minimum value is 1.
          +optional
        type: integer
      grpc:
        allOf:
        - $ref: '#/definitions/v1.GRPCAction'
        description: |-
          GRPC specifies an action involving a GRPC port.
          This is a beta field and requires enabling GRPCContainerProbe feature gate.
          +featureGate=GRPCContainerProbe
          +optional
      httpGet:
        allOf:
        - $ref: '#/definitions/v1.HTTPGetAction'
        description: |-
          HTTPGet specifies the http request to perform.
          +optional
      initialDelaySeconds:
        description: |-
          Number of seconds after the container has started before liveness probes are initiated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        type: integer
      periodSeconds:
        description: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
        type: integer
      successThreshold:
        description: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
          +optional
        type: integer
      tcpSocket:
        allOf:
        - $ref: '#/definitions/v1.TCPSocketAction'
        description: |-
          TCPSocket specifies an action involving a TCP port.
          +optional
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
          value overrides the value provided by the pod spec.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
          Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
          +optional
        type: integer
      timeoutSeconds:
        description: |-
          Number of seconds after which the probe times out.
          Defaults to 1 second. Minimum value is 1.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        type: integer
    type: object
  v1.ProcMountType:
    enum:
    - Default
    - Unmasked
    type: string
    x-enum-varnames:
    - DefaultProcMount
    - UnmaskedProcMount
  v1.Protocol:
    enum:
    - TCP
    - UDP
    - SCTP
    type: string
    x-enum-varnames:
    - ProtocolTCP
    - ProtocolUDP
    - ProtocolSCTP
  v1.PullPolicy:
    enum:
    - Always
    - Never
    - IfNotPresent
    type: string
    x-enum-varnames:
    - PullAlways
    - PullNever
    - PullIfNotPresent
  v1.ResourceFieldSelector:
    properties:
      containerName:
        description: |-
          Container name: required for volumes, optional for env vars
          +optional
        type: string
      divisor:
        allOf:
        - $ref: '#/definitions/resource.Quantity'
        description: |-
          Specifies the output format of the exposed resources, defaults to "1"
          +optional
      resource:
        description: 'Required: resource to select'
        type: string
    type: object
  v1.ResourceList:
    additionalProperties:
      $ref: '#/definitions/resource.Quantity'
    type: object
  v1.ResourceRequirements:
    properties:
      limits:
        allOf:
        - $ref: '#/definitions/v1.ResourceList'
        description: |-
          Limits describes the maximum amount of compute resources allowed.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      requests:
        allOf:
        - $ref: '#/definitions/v1.ResourceList'
        description: |-
          Requests describes the minimum amount of compute resources required.
          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
          otherwise to an implementation-defined value.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
    type: object
  v1.SELinuxOptions:
    properties:
      level:
        description: |-
          Level is SELinux level label that applies to the container.
          +optional
        type: string
      role:
        description: |-
          Role is a SELinux role label that applies to the container.
          +optional
        type: string
      type:
        description: |-
          Type is a SELinux type label that applies to the container.
          +optional
        type: string
      user:
        description: |-
          User is a SELinux user label that applies to the container.
          +optional
        type: string
    type: object
  v1.SeccompProfile:
    properties:
      localhostProfile:
        description: |-
          localhostProfile indicates a profile defined in a file on the node should be used.
          The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp profile location.
          Must only be set if type is "Localhost".
          +optional
        type: string
      type:
        allOf:
        - $ref: '#/definitions/v1.SeccompProfileType'
        description: |-
          type indicates which kind of seccomp profile will be applied.
          Valid options are:

          Localhost - a profile defined in a file on the node should be used.
          RuntimeDefault - the container runtime default profile should be used.
          Unconfined - no profile should be applied.
          +unionDiscriminator
    type: object
  v1.SeccompProfileType:
    enum:
    - Unconfined
    - RuntimeDefault
    - Localhost
    type: string
    x-enum-varnames:
    - SeccompProfileTypeUnconfined
    - SeccompProfileTypeRuntimeDefault
    - SeccompProfileTypeLocalhost
  v1.SecretEnvSource:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret must be defined
          +optional
        type: boolean
    type: object
  v1.SecretKeySelector:
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret
          key.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    type: object
  v1.SecurityContext:
    properties:
      allowPrivilegeEscalation:
        description: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      capabilities:
        allOf:
        - $ref: '#/definitions/v1.Capabilities'
        description: |-
          The capabilities to add/drop when running containers.
          Defaults to the default set of capabilities granted by the container runtime.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      privileged:
        description: |-
          Run container in privileged mode.
          Processes in privileged containers are essentially equivalent to root on the host.
          Defaults to false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      procMount:
        allOf:
        - $ref: '#/definitions/v1.ProcMountType'
        description: |-
          procMount denotes the type of proc mount to use for the containers.
          The default is DefaultProcMount which uses the container runtime defaults for
          readonly paths and masked paths.
          This requires the ProcMountType feature flag to be enabled.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      readOnlyRootFilesystem:
        description: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      seLinuxOptions:
        allOf:
        - $ref: '#/definitions/v1.SELinuxOptions'
        description: |-
          The SELinux context to be applied to the container.
          If unspecified, the container runtime will allocate a random SELinux context for each
          container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seccompProfile:
        allOf:
        - $ref: '#/definitions/v1.SeccompProfile'
        description: |-
          The seccomp options to use by this container. If seccomp options are
          provided at both the pod & container level, the container options
          override the pod options.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      windowsOptions:
        allOf:
        - $ref: '#/definitions/v1.WindowsSecurityContextOptions'
        description: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options from the PodSecurityContext will be used.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is linux.
          +optional
    type: object
  v1.TCPSocketAction:
    properties:
      host:
        description: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
        type: string
      port:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          Number or name of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
    type: object
  v1.TerminationMessagePolicy:
    enum:
    - File
    - FallbackToLogsOnError
    type: string
    x-enum-varnames:
    - TerminationMessageReadFile
    - TerminationMessageFallbackToLogsOnError
  v1.URIScheme:
    enum:
    - HTTP
    - HTTPS
    type: string
    x-enum-varnames:
    - URISchemeHTTP
    - URISchemeHTTPS
  v1.VolumeDevice:
    properties:
      devicePath:
        description: devicePath is the path inside of the container that the device
          will be mapped to.
        type: string
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        type: string
    type: object
  v1.VolumeMount:
    properties:
      mountPath:
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        type: string
      mountPropagation:
        allOf:
        - $ref: '#/definitions/v1.MountPropagationMode'
        description: |-
          mountPropagation determines how mounts are propagated from the host
          to container and the other way around.
          When not set, MountPropagationNone is used.
          This field is beta in 1.10.
          +optional
      name:
        description: This must match the Name of a Volume.
        type: string
      readOnly:
        description: |-
          Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
          +optional
        type: boolean
      subPath:
        description: |-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
          +optional
        type: string
      subPathExpr:
        description: |-
          Expanded path within the volume from which the container's volume should be mounted.
          Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
          Defaults to "" (volume's root).
          SubPathExpr and SubPath are mutually exclusive.
          +optional
        type: string
    type: object
  v1.WindowsSecurityContextOptions:
    properties:
      gmsaCredentialSpec:
        description: |-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
          GMSA credential spec named by the GMSACredentialSpecName field.
          +optional
        type: string
      gmsaCredentialSpecName:
        description: |-
          GMSACredentialSpecName is the name of the GMSA credential spec to use.
          +optional
        type: string
      hostProcess:
        description: |-
          HostProcess determines if a container should be run as a 'Host Process' container.
          This field is alpha-level and will only be honored by components that enable the
          WindowsHostProcessContainers feature flag. Setting this field without the feature
          flag will result in errors when validating the Pod. All of a Pod's containers must
          have the same effective HostProcess value (it is not allowed to have a mix of HostProcess
          containers and non-HostProcess containers).  In addition, if HostProcess is true
          then HostNetwork must also be set to true.
          +optional
        type: boolean
      runAsUserName:
        description: |-
          The UserName in Windows to run the entrypoint of the container process.
          Defaults to the user specified in image metadata if unspecified.
          May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: string
    type: object
info:
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Konveyor Hub API
  version: 0.3.z
paths:
  /addons:
    get:
      description: List all addons.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Addon'
            type: array
      summary: List all addons.
      tags:
      - addons
  /addons/{name}:
    get:
      description: Get an addon by name.
      parameters:
      - description: Addon name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Addon'
      summary: Get an addon by name.
      tags:
      - addons
  /adoptionplans:
    post:
      description: Graph generates an application dependency graph arranged in topological
        order.
      parameters:
      - description: List of requested App IDs
        in: body
        name: requestedApps
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Vertex'
            type: array
      summary: Generate an application dependency graph arranged in topological order.
      tags:
      - adoptionplans
  /analyses:
    get:
      description: |-
        List analyses for an application.
        Resources do not include relations.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Analysis'
            type: array
      summary: List analyses.
      tags:
      - analyses
  /analyses/{id}:
    delete:
      description: Delete an analysis by ID.
      parameters:
      - description: Analysis ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an analysis by ID.
      tags:
      - analyses
    get:
      description: Get an analysis (report) by ID.
      parameters:
      - description: Analysis ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Analysis'
      summary: Get an analysis (report) by ID.
      tags:
      - analyses
  /analyses/{id}/archive:
    post:
      description: Archive an analysis (report) by ID.
      parameters:
      - description: Analysis ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "204":
          description: No Content
      summary: Archive an analysis (report) by ID.
      tags:
      - analyses
  /analyses/{id}/dependencies:
    get:
      description: |-
        List analysis dependencies.
        filters:
        - name
        - version
        - sha
        - indirect
        - labels
      parameters:
      - description: Analysis ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TechDependency'
            type: array
      summary: List analysis dependencies.
      tags:
      - dependencies
  /analyses/{id}/issues:
    get:
      description: |-
        List issues for an analysis.
        filters:
        - ruleset
        - rule
        - name
        - category
        - effort
        - labels
      parameters:
      - description: Analysis ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Issue'
            type: array
      summary: List issues for an analysis.
      tags:
      - issues
  /analyses/dependencies:
    get:
      description: |-
        Each report collates dependencies by name and SHA.
        filters:
        - provider
        - name
        - version
        - sha
        - indirect
        - labels
        - application.id
        - application.name
        - businessService.id
        - businessService.name
        - tag.id
        sort:
        - provider
        - name
        - labels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TechDependency'
            type: array
      summary: List dependency reports.
      tags:
      - dependencies
  /analyses/incidents:
    get:
      description: |-
        List all incidents.
        filters:
        - file
        - issue.id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Incident'
            type: array
      summary: List all incidents.
      tags:
      - incidents
  /analyses/incidents/{id}:
    get:
      description: Get an incident.
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Incident'
      summary: Get an incident.
      tags:
      - issue
  /analyses/issues:
    get:
      description: |-
        List all issues.
        filters:
        - ruleset
        - rule
        - name
        - category
        - effort
        - labels
        - application.id
        - application.name
        - tag.id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Issue'
            type: array
      summary: List all issues.
      tags:
      - issues
  /analyses/issues/{id}:
    get:
      description: Get an issue.
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Issue'
      summary: Get an issue.
      tags:
      - issue
  /analyses/issues/{id}/incidents:
    get:
      description: |-
        List incidents for an issue.
        filters:
        - file
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Incident'
            type: array
      summary: List incidents for an issue.
      tags:
      - incidents
  /analyses/report/applications:
    get:
      description: |-
        List application reports.
        filters:
        - id
        - name
        - description
        - businessService
        - provider
        - name
        - version
        - sha
        - indirect
        - dep.provider
        - dep.name
        - dep.version
        - dep.sha
        - dep.indirect
        - dep.labels
        - application.id
        - application.name
        - businessService.id
        - businessService.name
        sort:
        - name
        - description
        - businessService
        - provider
        - name
        - version
        - sha
        - indirect
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.DepAppReport'
            type: array
      summary: List application reports.
      tags:
      - depappreports
  /analyses/report/applications/{id}/issues:
    get:
      description: |-
        Each report collates issues by ruleset/rule.
        filters:
        - ruleset
        - rule
        - category
        - effort
        - labels
        sort:
        - ruleset
        - rule
        - category
        - effort
        - files
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.IssueReport'
            type: array
      summary: List application issue reports.
      tags:
      - issuereport
  /analyses/report/issues/{id}/files:
    get:
      description: |-
        Each report collates incidents by file.
        filters:
        - file
        - effort
        - incidents
        sort:
        - file
        - effort
        - incidents
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.FileReport'
            type: array
      summary: List incident file reports.
      tags:
      - filereports
  /analyses/report/rules:
    get:
      description: |-
        Each report collates issues by ruleset/rule.
        filters:
        - ruleset
        - rule
        - category
        - effort
        - labels
        - applications
        - application.id
        - application.name
        - businessService.id
        - businessService.name
        - tag.id
        sort:
        - ruleset
        - rule
        - category
        - effort
        - applications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.RuleReport'
            type: array
      summary: List rule reports.
      tags:
      - rulereports
  /application/{id}/analyses:
    post:
      description: |-
        Create an analysis.
        Form fields:
        - file: file that contains the api.Analysis resource.
        - issues: file that multiple api.Issue resources.
        - dependencies: file that multiple api.TechDependency resources.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Analysis'
      summary: Create an analysis.
      tags:
      - analyses
  /application/{id}/analysis/dependencies:
    get:
      description: |-
        List application dependencies.
        filters:
        - name
        - version
        - sha
        - indirect
        - labels
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TechDependency'
            type: array
      summary: List application dependencies.
      tags:
      - dependencies
  /application/{id}/analysis/issues:
    get:
      description: |-
        List application issues.
        filters:
        - ruleset
        - rule
        - name
        - category
        - effort
        - labels
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Issue'
            type: array
      summary: List application issues.
      tags:
      - issues
  /applications:
    delete:
      description: Delete applications.
      parameters:
      - description: List of id
        in: body
        name: application
        required: true
        schema:
          items:
            type: integer
          type: array
      responses:
        "204":
          description: No Content
      summary: Delete a applications.
      tags:
      - applications
    get:
      description: List all applications.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Application'
            type: array
      summary: List all applications.
      tags:
      - applications
    post:
      consumes:
      - application/json
      description: Create an application.
      parameters:
      - description: Application data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Application'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Application'
      summary: Create an application.
      tags:
      - applications
  /applications/{id}:
    delete:
      description: Delete an application.
      parameters:
      - description: Application id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an application.
      tags:
      - applications
    get:
      description: Get an application by ID.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Application'
      summary: Get an application by ID.
      tags:
      - applications
    put:
      consumes:
      - application/json
      description: Update an application.
      parameters:
      - description: Application id
        in: path
        name: id
        required: true
        type: integer
      - description: Application data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Application'
      responses:
        "204":
          description: No Content
      summary: Update an application.
      tags:
      - applications
  /applications/{id}/analysis:
    get:
      description: Get the latest analysis for an application.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Analysis'
      summary: Get the latest analysis.
      tags:
      - analyses
  /applications/{id}/analysis/report:
    get:
      description: Get the latest analysis (static) report.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get the latest analysis (static) report.
      tags:
      - analyses
  /applications/{id}/assessments:
    get:
      description: List the assessments of an Application and any it inherits from
        its archetypes.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Assessment'
            type: array
      summary: List the assessments of an Application and any it inherits from its
        archetypes.
      tags:
      - applications
    post:
      consumes:
      - application/json
      description: Create an application assessment.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Assessment data
        in: body
        name: assessment
        required: true
        schema:
          $ref: '#/definitions/api.Assessment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Assessment'
      summary: Create an application assessment.
      tags:
      - applications
  /applications/{id}/bucket/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - applications
    get:
      description: |-
        Get bucket content by ID and path.
        Returns index.html for directories when Accept=text/html else a tarball.
        ?filter=glob supports directory content filtering.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - applications
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - applications
  /applications/{id}/facts:
    post:
      consumes:
      - application/json
      description: Create a fact.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fact data
        in: body
        name: fact
        required: true
        schema:
          $ref: '#/definitions/api.Fact'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      summary: Create a fact.
      tags:
      - applications
  /applications/{id}/facts/{key}:
    delete:
      description: |-
        Delete a fact.
        see api.FactKey for details on key parameter format.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fact key
        in: path
        name: key
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a fact.
      tags:
      - applications
    get:
      description: |-
        Get fact by name.
        see api.FactKey for details on key parameter format.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fact key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Get fact by name.
      tags:
      - applications
    put:
      consumes:
      - application/json
      description: |-
        Update (or create) a fact.
        see api.FactKey for details on key parameter format.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fact key
        in: path
        name: key
        required: true
        type: string
      - description: Fact value
        in: body
        name: fact
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Update (or create) a fact.
      tags:
      - applications
  '/applications/{id}/facts/{source}:':
    get:
      description: |-
        List facts by source.
        see api.FactKey for details on key parameter format.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Source key
        in: path
        name: source
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.FactMap'
      summary: List facts.
      tags:
      - applications
    put:
      description: |-
        Replace all facts from a source.
        see api.FactKey for details on key parameter format.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fact key
        in: path
        name: source
        required: true
        type: string
      - description: Fact map
        in: body
        name: factmap
        required: true
        schema:
          $ref: '#/definitions/api.FactMap'
      responses:
        "204":
          description: No Content
      summary: Replace all facts from a source.
      tags:
      - applications
  /applications/{id}/stakeholders:
    patch:
      description: Update the owner and contributors of an Application.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Application stakeholders
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Stakeholders'
      responses:
        "204":
          description: No Content
      summary: Update the owner and contributors of an Application.
      tags:
      - applications
  /applications/{id}/tags:
    get:
      description: List tag references.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Ref'
            type: array
      summary: List tag references.
      tags:
      - applications
    patch:
      consumes:
      - application/json
      description: Replace tag associations.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Source
        in: query
        name: source
        type: string
      - description: Tag references
        in: body
        name: tags
        required: true
        schema:
          items:
            $ref: '#/definitions/api.TagRef'
          type: array
      responses:
        "204":
          description: No Content
      summary: Replace tag associations.
      tags:
      - applications
    post:
      consumes:
      - application/json
      description: Ensure tag is associated with the application.
      parameters:
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/api.Ref'
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Ref'
      summary: Add tag association.
      tags:
      - applications
  /applications/{id}/tags/{sid}:
    delete:
      description: Ensure tag is not associated with the application.
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tag ID
        in: path
        name: sid
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete tag association.
      tags:
      - applications
  /archetypes:
    get:
      description: List all archetypes.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Archetype'
            type: array
      summary: List all archetypes.
      tags:
      - archetypes
    post:
      consumes:
      - application/json
      description: Create an archetype.
      parameters:
      - description: Archetype data
        in: body
        name: archetype
        required: true
        schema:
          $ref: '#/definitions/api.Archetype'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Archetype'
      summary: Create an archetype.
      tags:
      - archetypes
  /archetypes/{id}:
    delete:
      description: Delete an archetype.
      parameters:
      - description: Archetype ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an archetype.
      tags:
      - archetypes
    get:
      description: Get an archetype by ID.
      parameters:
      - description: Archetype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Archetype'
      summary: Get an archetype by ID.
      tags:
      - archetypes
    put:
      consumes:
      - application/json
      description: Update an archetype.
      parameters:
      - description: Archetype ID
        in: path
        name: id
        required: true
        type: integer
      - description: Archetype data
        in: body
        name: archetype
        required: true
        schema:
          $ref: '#/definitions/api.Archetype'
      responses:
        "204":
          description: No Content
      summary: Update an archetype.
      tags:
      - archetypes
  /archetypes/{id}/assessments:
    get:
      description: List the assessments of an archetype.
      parameters:
      - description: Archetype ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Assessment'
            type: array
      summary: List the assessments of an archetype.
      tags:
      - archetypes
    post:
      consumes:
      - application/json
      description: Create an archetype assessment.
      parameters:
      - description: Assessment data
        in: body
        name: assessment
        required: true
        schema:
          $ref: '#/definitions/api.Assessment'
      - description: Archetype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Assessment'
      summary: Create an archetype assessment.
      tags:
      - archetypes
  /assessments:
    get:
      description: List all assessments.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Assessment'
            type: array
      summary: List all assessments.
      tags:
      - assessments
  /assessments/{id}:
    delete:
      description: Delete an assessment.
      parameters:
      - description: Assessment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an assessment.
      tags:
      - assessments
    get:
      description: Get an assessment by ID.
      parameters:
      - description: Assessment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Assessment'
      summary: Get an assessment by ID.
      tags:
      - questionnaires
    put:
      consumes:
      - application/json
      description: Update an assessment.
      parameters:
      - description: Assessment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Assessment data
        in: body
        name: assessment
        required: true
        schema:
          $ref: '#/definitions/api.Assessment'
      responses:
        "204":
          description: No Content
      summary: Update an assessment.
      tags:
      - assessments
  /auth/login:
    post:
      description: Login and obtain a bearer token.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Login'
      summary: Login and obtain a bearer token.
      tags:
      - auth
  /auth/refresh:
    post:
      description: Refresh bearer token.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Login'
      summary: Refresh bearer token.
      tags:
      - auth
  /batch/tags:
    post:
      description: Batch-create Tags.
      parameters:
      - description: Tags data
        in: body
        name: tags
        required: true
        schema:
          items:
            $ref: '#/definitions/api.Tag'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tag'
            type: array
      summary: Batch-create Tags.
      tags:
      - batch
      - tags
  /batch/tickets:
    post:
      description: Batch-create Tickets.
      parameters:
      - description: Tickets data
        in: body
        name: tickets
        required: true
        schema:
          items:
            $ref: '#/definitions/api.Ticket'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Ticket'
            type: array
      summary: Batch-create Tickets.
      tags:
      - batch
      - tickets
  /buckets:
    get:
      description: List all buckets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Bucket'
            type: array
      summary: List all buckets.
      tags:
      - buckets
    post:
      consumes:
      - application/json
      description: Create a bucket.
      parameters:
      - description: Bucket name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Bucket'
      summary: Create a bucket.
      tags:
      - buckets
  /buckets/{id}:
    delete:
      description: Delete a bucket.
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a bucket.
      tags:
      - buckets
    get:
      description: |-
        Get a bucket by ID.
        Returns api.Bucket when Accept=application/json.
        Else returns index.html when Accept=text/html.
        Else returns tarball.
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Bucket'
      summary: Get a bucket by ID.
      tags:
      - buckets
  /buckets/{id}/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - buckets
    get:
      description: |-
        Get bucket content by ID and path.
        When path is FILE, returns file content.
        When path is DIRECTORY and Accept=text/html returns index.html.
        ?filter=glob supports directory content filtering.
        Else returns a tarball.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - buckets
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - buckets
  /businessservices:
    get:
      description: List all business services.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.BusinessService'
      summary: List all business services.
      tags:
      - businessservices
    post:
      consumes:
      - application/json
      description: Create a business service.
      parameters:
      - description: Business service data
        in: body
        name: business_service
        required: true
        schema:
          $ref: '#/definitions/api.BusinessService'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.BusinessService'
      summary: Create a business service.
      tags:
      - businessservices
  /businessservices/{id}:
    delete:
      description: Delete a business service.
      parameters:
      - description: Business service ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a business service.
      tags:
      - businessservices
    get:
      description: Get a business service by ID.
      parameters:
      - description: Business Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.BusinessService'
      summary: Get a business service by ID.
      tags:
      - businessservices
    put:
      consumes:
      - application/json
      description: Update a business service.
      parameters:
      - description: Business service ID
        in: path
        name: id
        required: true
        type: integer
      - description: Business service data
        in: body
        name: business_service
        required: true
        schema:
          $ref: '#/definitions/api.BusinessService'
      responses:
        "204":
          description: No Content
      summary: Update a business service.
      tags:
      - businessservices
  /cache:
    delete:
      description: Delete a directory within the cache.
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a directory within the cache.
      tags:
      - cache
  /caches/{wildcard}:
    get:
      description: Get the cache.
      parameters:
      - description: Cache DIR
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Cache'
      summary: Get the cache.
      tags:
      - cache
  /dependencies:
    get:
      description: List all dependencies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Dependency'
            type: array
      summary: List all dependencies.
      tags:
      - dependencies
    post:
      consumes:
      - application/json
      description: Create a dependency.
      parameters:
      - description: Dependency data
        in: body
        name: applications_dependency
        required: true
        schema:
          $ref: '#/definitions/api.Dependency'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Dependency'
      summary: Create a dependency.
      tags:
      - dependencies
  /dependencies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a dependency.
      parameters:
      - description: Dependency id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a dependency.
      tags:
      - dependencies
    get:
      description: Get a dependency by ID.
      parameters:
      - description: Dependency ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Dependency'
      summary: Get a dependency by ID.
      tags:
      - dependencies
  /files:
    get:
      description: List all files.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.File'
            type: array
      summary: List all files.
      tags:
      - file
    post:
      consumes:
      - application/json
      description: Create a file.
      parameters:
      - description: File name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.File'
      summary: Create a file.
      tags:
      - file
  /files/{id}:
    delete:
      description: Delete a file.
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a file.
      tags:
      - file
    get:
      description: Get a file by ID. Returns api.File when Accept=application/json
        else the file content.
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.File'
      summary: Get a file by ID.
      tags:
      - file
    put:
      consumes:
      - application/json
      description: Append a file.
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Append a file.
      tags:
      - file
  /identities:
    get:
      description: List all identities.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Identity'
            type: array
      summary: List all identities.
      tags:
      - identities
    post:
      consumes:
      - application/json
      description: Create an identity.
      parameters:
      - description: Identity data
        in: body
        name: identity
        required: true
        schema:
          $ref: '#/definitions/api.Identity'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Identity'
      summary: Create an identity.
      tags:
      - identities
  /identities/{id}:
    delete:
      description: Delete an identity.
      parameters:
      - description: Identity ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an identity.
      tags:
      - identities
    get:
      description: Get an identity by ID.
      parameters:
      - description: Identity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Identity'
      summary: Get an identity by ID.
      tags:
      - identities
    put:
      consumes:
      - application/json
      description: Update an identity.
      parameters:
      - description: Identity ID
        in: path
        name: id
        required: true
        type: integer
      - description: Identity data
        in: body
        name: identity
        required: true
        schema:
          $ref: '#/definitions/api.Identity'
      responses:
        "204":
          description: No Content
      summary: Update an identity.
      tags:
      - identities
  /imports:
    get:
      description: List imports.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Import'
            type: array
      summary: List imports.
      tags:
      - imports
  /imports/{id}:
    delete:
      description: Delete an import. This leaves any created application or dependency.
      parameters:
      - description: Import ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an import.
      tags:
      - imports
    get:
      description: Get an import by ID.
      parameters:
      - description: Import ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Import'
      summary: Get an import by ID.
      tags:
      - imports
  /importsummaries:
    get:
      description: List import summaries.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.ImportSummary'
            type: array
      summary: List import summaries.
      tags:
      - imports
  /importsummaries/{id}:
    delete:
      description: Delete an import summary and associated import records.
      parameters:
      - description: ImportSummary ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an import summary and associated import records.
      tags:
      - imports
    get:
      description: Get an import by ID.
      parameters:
      - description: ImportSummary ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ImportSummary'
      summary: Get an import summary by ID.
      tags:
      - imports
  /importsummaries/download:
    get:
      description: Export the source CSV for a particular import summary.
      parameters:
      - description: ImportSummary ID
        in: query
        name: importSummary.id
        required: true
        type: string
      produces:
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            type: file
      summary: Export the source CSV for a particular import summary.
      tags:
      - imports
  /importsummaries/upload:
    post:
      description: Upload a CSV containing applications and dependencies to import.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.ImportSummary'
      summary: Upload a CSV containing applications and dependencies to import.
      tags:
      - imports
  /jobfunctions:
    get:
      description: List all job functions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.JobFunction'
            type: array
      summary: List all job functions.
      tags:
      - jobfunctions
    post:
      consumes:
      - application/json
      description: Create a job function.
      parameters:
      - description: Job Function data
        in: body
        name: job_function
        required: true
        schema:
          $ref: '#/definitions/api.JobFunction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.JobFunction'
      summary: Create a job function.
      tags:
      - jobfunctions
  /jobfunctions/{id}:
    delete:
      description: Delete a job function.
      parameters:
      - description: Job Function ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a job function.
      tags:
      - jobfunctions
    get:
      description: Get a job function by ID.
      parameters:
      - description: Job Function ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.JobFunction'
      summary: Get a job function by ID.
      tags:
      - jobfunctions
    put:
      consumes:
      - application/json
      description: Update a job function.
      parameters:
      - description: Job Function ID
        in: path
        name: id
        required: true
        type: integer
      - description: Job Function data
        in: body
        name: job_function
        required: true
        schema:
          $ref: '#/definitions/api.JobFunction'
      responses:
        "204":
          description: No Content
      summary: Update a job function.
      tags:
      - jobfunctions
  /metrics:
    get:
      description: |-
        Get Prometheus metrics.
        Wrapper for Prometheus-supplied handler.
        Served on port defined by METRICS_PORT environment variable.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      summary: Get Prometheus metrics.
      tags:
      - metrics
  /migrationwaves:
    get:
      description: List all migration waves.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.MigrationWave'
            type: array
      summary: List all migration waves.
      tags:
      - migrationwaves
    post:
      consumes:
      - application/json
      description: Create a migration wave.
      parameters:
      - description: Migration Wave data
        in: body
        name: migrationwave
        required: true
        schema:
          $ref: '#/definitions/api.MigrationWave'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.MigrationWave'
      summary: Create a migration wave.
      tags:
      - migrationwaves
  /migrationwaves/{id}:
    delete:
      description: Delete a migration wave.
      parameters:
      - description: MigrationWave id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a migration wave.
      tags:
      - migrationwaves
    get:
      description: Get a migration wave by ID.
      parameters:
      - description: Migration Wave ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.MigrationWave'
      summary: Get a migration wave by ID.
      tags:
      - migrationwaves
    put:
      consumes:
      - application/json
      description: Update a migration wave.
      parameters:
      - description: MigrationWave id
        in: path
        name: id
        required: true
        type: integer
      - description: MigrationWave data
        in: body
        name: migrationWave
        required: true
        schema:
          $ref: '#/definitions/api.MigrationWave'
      responses:
        "204":
          description: No Content
      summary: Update a migration wave.
      tags:
      - migrationwaves
  /proxies:
    get:
      description: List all proxies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Proxy'
            type: array
      summary: List all proxies.
      tags:
      - proxies
    post:
      consumes:
      - application/json
      description: Create an proxy.
      parameters:
      - description: Proxy data
        in: body
        name: proxy
        required: true
        schema:
          $ref: '#/definitions/api.Proxy'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Proxy'
      summary: Create an proxy.
      tags:
      - proxies
  /proxies/{id}:
    delete:
      description: Delete an proxy.
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an proxy.
      tags:
      - proxies
    get:
      description: Get an proxy by ID.
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Proxy'
      summary: Get an proxy by ID.
      tags:
      - proxies
    put:
      consumes:
      - application/json
      description: Update an proxy.
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: integer
      - description: Proxy data
        in: body
        name: proxy
        required: true
        schema:
          $ref: '#/definitions/api.Proxy'
      responses:
        "204":
          description: No Content
      summary: Update an proxy.
      tags:
      - proxies
  /questionnaires:
    get:
      description: List all questionnaires.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Questionnaire'
            type: array
      summary: List all questionnaires.
      tags:
      - questionnaires
    post:
      consumes:
      - application/json
      description: Create a questionnaire.
      parameters:
      - description: Questionnaire data
        in: body
        name: questionnaire
        required: true
        schema:
          $ref: '#/definitions/api.Questionnaire'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Questionnaire'
      summary: Create a questionnaire.
      tags:
      - questionnaires
  /questionnaires/{id}:
    delete:
      description: Delete a questionnaire.
      parameters:
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a questionnaire.
      tags:
      - questionnaires
    get:
      description: Get a questionnaire by ID.
      parameters:
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Questionnaire'
      summary: Get a questionnaire by ID.
      tags:
      - questionnaires
    put:
      consumes:
      - application/json
      description: |-
        Update a questionnaire. If the Questionnaire
        is builtin, only its "required" field can be changed
        and all other fields will be ignored.
      parameters:
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: integer
      - description: Questionnaire data
        in: body
        name: questionnaire
        required: true
        schema:
          $ref: '#/definitions/api.Questionnaire'
      responses:
        "204":
          description: No Content
      summary: Update a questionnaire.
      tags:
      - questionnaires
  /reviews:
    get:
      description: List all reviews.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Review'
            type: array
      summary: List all reviews.
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Create a review.
      parameters:
      - description: Review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/api.Review'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Review'
      summary: Create a review.
      tags:
      - reviews
  /reviews/{id}:
    delete:
      description: Delete a review.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a review.
      tags:
      - reviews
    get:
      description: Get a review by ID.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Review'
      summary: Get a review by ID.
      tags:
      - reviews
    put:
      consumes:
      - application/json
      description: Update a review.
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      - description: Review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/api.Review'
      responses:
        "204":
          description: No Content
      summary: Update a review.
      tags:
      - reviews
  /reviews/copy:
    post:
      consumes:
      - application/json
      description: Copy a review from one application to others.
      parameters:
      - description: Review copy request data
        in: body
        name: copy_request
        required: true
        schema:
          $ref: '#/definitions/api.CopyRequest'
      responses:
        "204":
          description: No Content
      summary: Copy a review from one application to others.
      tags:
      - reviews
  /rulesets:
    get:
      description: |-
        List all bindings.
        filters:
        - name
        - labels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.RuleSet'
            type: array
      summary: List all bindings.
      tags:
      - rulesets
    post:
      consumes:
      - application/json
      description: Create a ruleset.
      parameters:
      - description: RuleSet data
        in: body
        name: ruleBundle
        required: true
        schema:
          $ref: '#/definitions/api.RuleSet'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.RuleSet'
      summary: Create a ruleset.
      tags:
      - rulesets
  /rulesets/{id}:
    delete:
      description: Delete a ruleset.
      parameters:
      - description: RuleSet ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a ruleset.
      tags:
      - rulesets
    get:
      description: Get a RuleSet by ID.
      parameters:
      - description: RuleSet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RuleSet'
      summary: Get a RuleSet by ID.
      tags:
      - rulesets
    put:
      consumes:
      - application/json
      description: Update a ruleset.
      parameters:
      - description: RuleSet ID
        in: path
        name: id
        required: true
        type: integer
      - description: RuleSet data
        in: body
        name: ruleBundle
        required: true
        schema:
          $ref: '#/definitions/api.RuleSet'
      responses:
        "204":
          description: No Content
      summary: Update a ruleset.
      tags:
      - rulesets
  /schema:
    get:
      description: Get the API schema.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Schema'
      summary: Get the API schema.
      tags:
      - schema
  /settings:
    get:
      description: List all settings.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Setting'
            type: array
      summary: List all settings.
      tags:
      - settings
    post:
      consumes:
      - application/json
      description: Create a setting.
      parameters:
      - description: Setting data
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/api.Setting'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Setting'
      summary: Create a setting.
      tags:
      - settings
  /settings/{key}:
    delete:
      description: Delete a setting.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a setting.
      tags:
      - settings
    get:
      description: Get a setting by its key.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Setting'
      summary: Get a setting by its key.
      tags:
      - settings
    post:
      consumes:
      - application/json
      description: Create a setting.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      - description: Setting value
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/api.Setting'
      responses:
        "201":
          description: Created
      summary: Create a setting.
      tags:
      - settings
    put:
      consumes:
      - application/json
      description: Update a setting.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Update a setting.
      tags:
      - settings
  /stakeholdergroups:
    get:
      description: List all stakeholder groups.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.StakeholderGroup'
            type: array
      summary: List all stakeholder groups.
      tags:
      - stakeholdergroups
    post:
      consumes:
      - application/json
      description: Create a stakeholder group.
      parameters:
      - description: Stakeholder Group data
        in: body
        name: stakeholder_group
        required: true
        schema:
          $ref: '#/definitions/api.StakeholderGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.StakeholderGroup'
      summary: Create a stakeholder group.
      tags:
      - stakeholdergroups
  /stakeholdergroups/{id}:
    delete:
      description: Delete a stakeholder group.
      parameters:
      - description: Stakeholder Group ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a stakeholder group.
      tags:
      - stakeholdergroups
    get:
      description: Get a stakeholder group by ID.
      parameters:
      - description: Stakeholder Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.StakeholderGroup'
      summary: Get a stakeholder group by ID.
      tags:
      - stakeholdergroups
    put:
      consumes:
      - application/json
      description: Update a stakeholder group.
      parameters:
      - description: Stakeholder Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Stakeholder Group data
        in: body
        name: stakeholder_group
        required: true
        schema:
          $ref: '#/definitions/api.StakeholderGroup'
      responses:
        "204":
          description: No Content
      summary: Update a stakeholder group.
      tags:
      - stakeholdergroups
  /stakeholders:
    get:
      description: List all stakeholders.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Stakeholder'
            type: array
      summary: List all stakeholders.
      tags:
      - stakeholders
    post:
      consumes:
      - application/json
      description: Create a stakeholder.
      parameters:
      - description: Stakeholder data
        in: body
        name: stakeholder
        required: true
        schema:
          $ref: '#/definitions/api.Stakeholder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Stakeholder'
      summary: Create a stakeholder.
      tags:
      - stakeholders
  /stakeholders/{id}:
    delete:
      description: Delete a stakeholder.
      parameters:
      - description: Stakeholder ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a stakeholder.
      tags:
      - stakeholders
    get:
      description: Get a stakeholder by ID.
      parameters:
      - description: Stakeholder ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Stakeholder'
      summary: Get a stakeholder by ID.
      tags:
      - stakeholders
    put:
      consumes:
      - application/json
      description: Update a stakeholder.
      parameters:
      - description: Stakeholder ID
        in: path
        name: id
        required: true
        type: integer
      - description: Stakeholder data
        in: body
        name: stakeholder
        required: true
        schema:
          $ref: '#/definitions/api.Stakeholder'
      responses:
        "204":
          description: No Content
      summary: Update a stakeholder.
      tags:
      - stakeholders
  /tagcategories:
    get:
      description: List all tag categories.
      parameters:
      - description: Optional category name filter
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TagCategory'
            type: array
      summary: List all tag categories.
      tags:
      - tagcategories
    post:
      consumes:
      - application/json
      description: Create a tag category.
      parameters:
      - description: Tag Category data
        in: body
        name: tag_type
        required: true
        schema:
          $ref: '#/definitions/api.TagCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.TagCategory'
      summary: Create a tag category.
      tags:
      - tagcategories
  /tagcategories/{id}:
    delete:
      description: Delete a tag category.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a tag category.
      tags:
      - tagcategories
    get:
      description: Get a tag category by ID.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TagCategory'
      summary: Get a tag category by ID.
      tags:
      - tagcategories
    put:
      consumes:
      - application/json
      description: Update a tag category.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tag Category data
        in: body
        name: tag_type
        required: true
        schema:
          $ref: '#/definitions/api.TagCategory'
      responses:
        "204":
          description: No Content
      summary: Update a tag category.
      tags:
      - tagcategories
  /tagcategories/{id}/tags:
    get:
      description: List the tags in the tag category.
      parameters:
      - description: Tag Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Optional tag name filter
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tag'
            type: array
      summary: List the tags in the tag category.
      tags:
      - tagcategories
  /tags:
    get:
      description: List all tags.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tag'
            type: array
      summary: List all tags.
      tags:
      - tags
    post:
      consumes:
      - application/json
      description: Create a tag.
      parameters:
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/api.Tag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Tag'
      summary: Create a tag.
      tags:
      - tags
  /tags/{id}:
    delete:
      description: Delete a tag.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a tag.
      tags:
      - tags
    get:
      description: Get a tag by ID.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Tag'
      summary: Get a tag by ID.
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Update a tag.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/api.Tag'
      responses:
        "204":
          description: No Content
      summary: Update a tag.
      tags:
      - tags
  /targets:
    get:
      description: List all targets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Target'
            type: array
      summary: List all targets.
      tags:
      - targets
    post:
      consumes:
      - application/json
      description: Create a target.
      parameters:
      - description: Target data
        in: body
        name: target
        required: true
        schema:
          $ref: '#/definitions/api.Target'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Target'
      summary: Create a target.
      tags:
      - targets
  /targets/{id}:
    delete:
      description: Delete a target.
      parameters:
      - description: Target ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a target.
      tags:
      - targets
    get:
      description: Get a Target by ID.
      parameters:
      - description: Target ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Target'
      summary: Get a Target by ID.
      tags:
      - targets
    put:
      consumes:
      - application/json
      description: Update a target.
      parameters:
      - description: Target ID
        in: path
        name: id
        required: true
        type: integer
      - description: Target data
        in: body
        name: target
        required: true
        schema:
          $ref: '#/definitions/api.Target'
      responses:
        "204":
          description: No Content
      summary: Update a target.
      tags:
      - targets
  /taskgroups:
    get:
      description: List all task groups.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TaskGroup'
            type: array
      summary: List all task groups.
      tags:
      - taskgroups
    post:
      consumes:
      - application/json
      description: Create a task group.
      parameters:
      - description: TaskGroup data
        in: body
        name: taskgroup
        required: true
        schema:
          $ref: '#/definitions/api.TaskGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.TaskGroup'
      summary: Create a task group.
      tags:
      - taskgroups
  /taskgroups/{id}:
    delete:
      description: Delete a task group.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a task group.
      tags:
      - taskgroups
    get:
      description: Get a task group by ID.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TaskGroup'
      summary: Get a task group by ID.
      tags:
      - taskgroups
    put:
      consumes:
      - application/json
      description: Update a task group.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.TaskGroup'
      responses:
        "204":
          description: No Content
      summary: Update a task group.
      tags:
      - taskgroups
  /taskgroups/{id}/bucket/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - taskgroups
    get:
      description: |-
        Get bucket content by ID and path.
        Returns index.html for directories when Accept=text/html else a tarball.
        ?filter=glob supports directory content filtering.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - taskgroups
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - taskgroups
  /taskgroups/{id}/submit:
    put:
      consumes:
      - application/json
      description: Patch and submit a task group.
      parameters:
      - description: TaskGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: TaskGroup data (optional)
        in: body
        name: taskgroup
        schema:
          $ref: '#/definitions/api.TaskGroup'
      responses:
        "204":
          description: No Content
      summary: Submit a task group.
      tags:
      - taskgroups
  /tasks:
    get:
      description: |-
        Queued queued task report.
        Filters:
        - addon
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TaskQueue'
            type: array
      summary: Queued queued task report.
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a task.
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Task'
      summary: Create a task.
      tags:
      - tasks
  /tasks/{id}:
    delete:
      description: Delete a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a task.
      tags:
      - tasks
    get:
      description: Get a task by ID.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Task'
      summary: Get a task by ID.
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.Task'
      responses:
        "200":
          description: OK
      summary: Update a task.
      tags:
      - tasks
  /tasks/{id}/attached:
    get:
      description: |-
        Get attached files.
        Returns a tarball with attached files.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get attached files.
      tags:
      - tasks
  /tasks/{id}/bucket/{wildcard}:
    delete:
      description: Delete bucket content by ID and path.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete bucket content by ID and path.
      tags:
      - tasks
    get:
      description: |-
        Get bucket content by ID and path.
        Returns index.html for directories when Accept=text/html else a tarball.
        ?filter=glob supports directory content filtering.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Get bucket content by ID and path.
      tags:
      - tasks
    post:
      description: Upload bucket content by ID and path (handles both [post] and [put]
        requests).
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content path
        in: path
        name: wildcard
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Upload bucket content by ID and path.
      tags:
      - tasks
  /tasks/{id}/cancel:
    put:
      description: Cancel a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "202":
          description: Accepted
      summary: Cancel a task.
      tags:
      - tasks
  /tasks/{id}/report:
    delete:
      consumes:
      - application/json
      description: Delete a task report.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a task report.
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Update a task report.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: TaskReport data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.TaskReport'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.TaskReport'
      summary: Create a task report.
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task report.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: TaskReport data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/api.TaskReport'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Update a task report.
      tags:
      - tasks
  /tasks/{id}/submit:
    put:
      consumes:
      - application/json
      description: Patch and submit a task.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task data (optional)
        in: body
        name: task
        schema:
          $ref: '#/definitions/api.Task'
      responses:
        "200":
          description: OK
      summary: Submit a task.
      tags:
      - tasks
  /tickets:
    get:
      description: List all tickets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Ticket'
            type: array
      summary: List all tickets.
      tags:
      - tickets
    post:
      consumes:
      - application/json
      description: Create a ticket.
      parameters:
      - description: Ticket data
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/api.Ticket'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Ticket'
      summary: Create a ticket.
      tags:
      - tickets
  /tickets/{id}:
    delete:
      description: Delete a ticket.
      parameters:
      - description: Ticket id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a ticket.
      tags:
      - tickets
    get:
      description: Get a ticket by ID.
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Ticket'
      summary: Get a ticket by ID.
      tags:
      - tickets
  /trackers:
    get:
      description: List all trackers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Tracker'
            type: array
      summary: List all trackers.
      tags:
      - trackers
    post:
      consumes:
      - application/json
      description: Create a tracker.
      parameters:
      - description: Tracker data
        in: body
        name: tracker
        required: true
        schema:
          $ref: '#/definitions/api.Tracker'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Tracker'
      summary: Create a tracker.
      tags:
      - trackers
  /trackers/{id}:
    delete:
      description: Delete a tracker.
      parameters:
      - description: Tracker id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a tracker.
      tags:
      - trackers
    get:
      description: Get a tracker by ID.
      parameters:
      - description: Tracker ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Tracker'
      summary: Get a tracker by ID.
      tags:
      - trackers
    put:
      consumes:
      - application/json
      description: Update a tracker.
      parameters:
      - description: Tracker id
        in: path
        name: id
        required: true
        type: integer
      - description: Tracker data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.Tracker'
      responses:
        "204":
          description: No Content
      summary: Update a tracker.
      tags:
      - trackers
  /trackers/{id}/projects:
    get:
      description: List a tracker's projects.
      parameters:
      - description: Tracker ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Project'
            type: array
      summary: List a tracker's projects.
      tags:
      - trackers
  /trackers/{id}/projects/{id2}:
    get:
      description: Get a tracker project by ID.
      parameters:
      - description: Tracker ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project ID
        in: path
        name: id2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Project'
      summary: Get a tracker project by ID.
      tags:
      - trackers
  /trackers/{id}/projects/{id2}/issuetypes:
    get:
      description: List a tracker project's issue types.
      parameters:
      - description: Tracker ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project ID
        in: path
        name: id2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.IssueType'
            type: array
      summary: List a tracker project's issue types.
      tags:
      - trackers
produces:
- application/json
swagger: "2.0"
